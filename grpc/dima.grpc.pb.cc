// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dima.proto

#include "dima.pb.h"
#include "dima.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace birdy_grpc {

static const char* ModelEndpoint_method_names[] = {
  "/birdy_grpc.ModelEndpoint/RecognizeBirdByPhoto",
  "/birdy_grpc.ModelEndpoint/RecognizeBirdBySound",
};

std::unique_ptr< ModelEndpoint::Stub> ModelEndpoint::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ModelEndpoint::Stub> stub(new ModelEndpoint::Stub(channel));
  return stub;
}

ModelEndpoint::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RecognizeBirdByPhoto_(ModelEndpoint_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecognizeBirdBySound_(ModelEndpoint_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ModelEndpoint::Stub::RecognizeBirdByPhoto(::grpc::ClientContext* context, const ::birdy_grpc::RecognizeBirdRequest& request, ::birdy_grpc::RecognizeBirdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RecognizeBirdByPhoto_, context, request, response);
}

void ModelEndpoint::Stub::experimental_async::RecognizeBirdByPhoto(::grpc::ClientContext* context, const ::birdy_grpc::RecognizeBirdRequest* request, ::birdy_grpc::RecognizeBirdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RecognizeBirdByPhoto_, context, request, response, std::move(f));
}

void ModelEndpoint::Stub::experimental_async::RecognizeBirdByPhoto(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::RecognizeBirdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RecognizeBirdByPhoto_, context, request, response, std::move(f));
}

void ModelEndpoint::Stub::experimental_async::RecognizeBirdByPhoto(::grpc::ClientContext* context, const ::birdy_grpc::RecognizeBirdRequest* request, ::birdy_grpc::RecognizeBirdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RecognizeBirdByPhoto_, context, request, response, reactor);
}

void ModelEndpoint::Stub::experimental_async::RecognizeBirdByPhoto(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::RecognizeBirdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RecognizeBirdByPhoto_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::birdy_grpc::RecognizeBirdResponse>* ModelEndpoint::Stub::AsyncRecognizeBirdByPhotoRaw(::grpc::ClientContext* context, const ::birdy_grpc::RecognizeBirdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::birdy_grpc::RecognizeBirdResponse>::Create(channel_.get(), cq, rpcmethod_RecognizeBirdByPhoto_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::birdy_grpc::RecognizeBirdResponse>* ModelEndpoint::Stub::PrepareAsyncRecognizeBirdByPhotoRaw(::grpc::ClientContext* context, const ::birdy_grpc::RecognizeBirdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::birdy_grpc::RecognizeBirdResponse>::Create(channel_.get(), cq, rpcmethod_RecognizeBirdByPhoto_, context, request, false);
}

::grpc::Status ModelEndpoint::Stub::RecognizeBirdBySound(::grpc::ClientContext* context, const ::birdy_grpc::RecognizeBirdRequest& request, ::birdy_grpc::RecognizeBirdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RecognizeBirdBySound_, context, request, response);
}

void ModelEndpoint::Stub::experimental_async::RecognizeBirdBySound(::grpc::ClientContext* context, const ::birdy_grpc::RecognizeBirdRequest* request, ::birdy_grpc::RecognizeBirdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RecognizeBirdBySound_, context, request, response, std::move(f));
}

void ModelEndpoint::Stub::experimental_async::RecognizeBirdBySound(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::RecognizeBirdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RecognizeBirdBySound_, context, request, response, std::move(f));
}

void ModelEndpoint::Stub::experimental_async::RecognizeBirdBySound(::grpc::ClientContext* context, const ::birdy_grpc::RecognizeBirdRequest* request, ::birdy_grpc::RecognizeBirdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RecognizeBirdBySound_, context, request, response, reactor);
}

void ModelEndpoint::Stub::experimental_async::RecognizeBirdBySound(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::RecognizeBirdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RecognizeBirdBySound_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::birdy_grpc::RecognizeBirdResponse>* ModelEndpoint::Stub::AsyncRecognizeBirdBySoundRaw(::grpc::ClientContext* context, const ::birdy_grpc::RecognizeBirdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::birdy_grpc::RecognizeBirdResponse>::Create(channel_.get(), cq, rpcmethod_RecognizeBirdBySound_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::birdy_grpc::RecognizeBirdResponse>* ModelEndpoint::Stub::PrepareAsyncRecognizeBirdBySoundRaw(::grpc::ClientContext* context, const ::birdy_grpc::RecognizeBirdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::birdy_grpc::RecognizeBirdResponse>::Create(channel_.get(), cq, rpcmethod_RecognizeBirdBySound_, context, request, false);
}

ModelEndpoint::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ModelEndpoint_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ModelEndpoint::Service, ::birdy_grpc::RecognizeBirdRequest, ::birdy_grpc::RecognizeBirdResponse>(
          [](ModelEndpoint::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::birdy_grpc::RecognizeBirdRequest* req,
             ::birdy_grpc::RecognizeBirdResponse* resp) {
               return service->RecognizeBirdByPhoto(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ModelEndpoint_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ModelEndpoint::Service, ::birdy_grpc::RecognizeBirdRequest, ::birdy_grpc::RecognizeBirdResponse>(
          [](ModelEndpoint::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::birdy_grpc::RecognizeBirdRequest* req,
             ::birdy_grpc::RecognizeBirdResponse* resp) {
               return service->RecognizeBirdBySound(ctx, req, resp);
             }, this)));
}

ModelEndpoint::Service::~Service() {
}

::grpc::Status ModelEndpoint::Service::RecognizeBirdByPhoto(::grpc::ServerContext* context, const ::birdy_grpc::RecognizeBirdRequest* request, ::birdy_grpc::RecognizeBirdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ModelEndpoint::Service::RecognizeBirdBySound(::grpc::ServerContext* context, const ::birdy_grpc::RecognizeBirdRequest* request, ::birdy_grpc::RecognizeBirdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace birdy_grpc

