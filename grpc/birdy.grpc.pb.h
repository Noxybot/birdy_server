// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: birdy.proto
#ifndef GRPC_birdy_2eproto__INCLUDED
#define GRPC_birdy_2eproto__INCLUDED

#include "birdy.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace birdy_grpc {

class MainEndpoint final {
 public:
  static constexpr char const* service_full_name() {
    return "birdy_grpc.MainEndpoint";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::birdy_grpc::RegistrationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::RegistrationResponse>> AsyncRegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::RegistrationResponse>>(AsyncRegisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::RegistrationResponse>> PrepareAsyncRegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::RegistrationResponse>>(PrepareAsyncRegisterUserRaw(context, request, cq));
    }
    virtual ::grpc::Status LoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::birdy_grpc::LoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::LoginResponse>> AsyncLoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::LoginResponse>>(AsyncLoginUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::LoginResponse>> PrepareAsyncLoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::LoginResponse>>(PrepareAsyncLoginUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::birdy_grpc::FindBirdByNameResponse>> FindBirdByName(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdByNameRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::birdy_grpc::FindBirdByNameResponse>>(FindBirdByNameRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::FindBirdByNameResponse>> AsyncFindBirdByName(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdByNameRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::FindBirdByNameResponse>>(AsyncFindBirdByNameRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::FindBirdByNameResponse>> PrepareAsyncFindBirdByName(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdByNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::FindBirdByNameResponse>>(PrepareAsyncFindBirdByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::birdy_grpc::FindBirdCoordinatesByNameResponse>> FindBirdCoordinatesByName(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdCoordinatesByNameRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::birdy_grpc::FindBirdCoordinatesByNameResponse>>(FindBirdCoordinatesByNameRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::FindBirdCoordinatesByNameResponse>> AsyncFindBirdCoordinatesByName(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdCoordinatesByNameRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::FindBirdCoordinatesByNameResponse>>(AsyncFindBirdCoordinatesByNameRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::FindBirdCoordinatesByNameResponse>> PrepareAsyncFindBirdCoordinatesByName(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdCoordinatesByNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::FindBirdCoordinatesByNameResponse>>(PrepareAsyncFindBirdCoordinatesByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::birdy_grpc::UserInfo>> BindBoysByCity(::grpc::ClientContext* context, const ::birdy_grpc::FindBoysByCityRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::birdy_grpc::UserInfo>>(BindBoysByCityRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::UserInfo>> AsyncBindBoysByCity(::grpc::ClientContext* context, const ::birdy_grpc::FindBoysByCityRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::UserInfo>>(AsyncBindBoysByCityRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::UserInfo>> PrepareAsyncBindBoysByCity(::grpc::ClientContext* context, const ::birdy_grpc::FindBoysByCityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::UserInfo>>(PrepareAsyncBindBoysByCityRaw(context, request, cq));
    }
    virtual ::grpc::Status AddBirdWithData(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest& request, ::birdy_grpc::AddBirdWithDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::AddBirdWithDataResponse>> AsyncAddBirdWithData(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::AddBirdWithDataResponse>>(AsyncAddBirdWithDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::AddBirdWithDataResponse>> PrepareAsyncAddBirdWithData(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::AddBirdWithDataResponse>>(PrepareAsyncAddBirdWithDataRaw(context, request, cq));
    }
    virtual ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest& request, ::birdy_grpc::SendMessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::SendMessageResponse>> AsyncSendMessage(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::SendMessageResponse>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::SendMessageResponse>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::SendMessageResponse>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::birdy_grpc::ChatMessage>> SubscribeToNewMessages(::grpc::ClientContext* context, const ::birdy_grpc::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::birdy_grpc::ChatMessage>>(SubscribeToNewMessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::ChatMessage>> AsyncSubscribeToNewMessages(::grpc::ClientContext* context, const ::birdy_grpc::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::ChatMessage>>(AsyncSubscribeToNewMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::ChatMessage>> PrepareAsyncSubscribeToNewMessages(::grpc::ClientContext* context, const ::birdy_grpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::ChatMessage>>(PrepareAsyncSubscribeToNewMessagesRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateUser(::grpc::ClientContext* context, const ::birdy_grpc::UserInfo& request, ::birdy_grpc::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::Empty>> AsyncUpdateUser(::grpc::ClientContext* context, const ::birdy_grpc::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::Empty>>(AsyncUpdateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::Empty>> PrepareAsyncUpdateUser(::grpc::ClientContext* context, const ::birdy_grpc::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::Empty>>(PrepareAsyncUpdateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::birdy_grpc::EncyclopedicBirdInfo>> GetTopBirds(::grpc::ClientContext* context, const ::birdy_grpc::GetTopBirdsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::birdy_grpc::EncyclopedicBirdInfo>>(GetTopBirdsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::EncyclopedicBirdInfo>> AsyncGetTopBirds(::grpc::ClientContext* context, const ::birdy_grpc::GetTopBirdsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::EncyclopedicBirdInfo>>(AsyncGetTopBirdsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::EncyclopedicBirdInfo>> PrepareAsyncGetTopBirds(::grpc::ClientContext* context, const ::birdy_grpc::GetTopBirdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::EncyclopedicBirdInfo>>(PrepareAsyncGetTopBirdsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void RegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest* request, ::birdy_grpc::RegistrationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::RegistrationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest* request, ::birdy_grpc::RegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest* request, ::birdy_grpc::RegistrationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::RegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::RegistrationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void LoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest* request, ::birdy_grpc::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoginUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest* request, ::birdy_grpc::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest* request, ::birdy_grpc::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LoginUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LoginUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FindBirdByName(::grpc::ClientContext* context, ::birdy_grpc::FindBirdByNameRequest* request, ::grpc::ClientReadReactor< ::birdy_grpc::FindBirdByNameResponse>* reactor) = 0;
      #else
      virtual void FindBirdByName(::grpc::ClientContext* context, ::birdy_grpc::FindBirdByNameRequest* request, ::grpc::experimental::ClientReadReactor< ::birdy_grpc::FindBirdByNameResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FindBirdCoordinatesByName(::grpc::ClientContext* context, ::birdy_grpc::FindBirdCoordinatesByNameRequest* request, ::grpc::ClientReadReactor< ::birdy_grpc::FindBirdCoordinatesByNameResponse>* reactor) = 0;
      #else
      virtual void FindBirdCoordinatesByName(::grpc::ClientContext* context, ::birdy_grpc::FindBirdCoordinatesByNameRequest* request, ::grpc::experimental::ClientReadReactor< ::birdy_grpc::FindBirdCoordinatesByNameResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void BindBoysByCity(::grpc::ClientContext* context, ::birdy_grpc::FindBoysByCityRequest* request, ::grpc::ClientReadReactor< ::birdy_grpc::UserInfo>* reactor) = 0;
      #else
      virtual void BindBoysByCity(::grpc::ClientContext* context, ::birdy_grpc::FindBoysByCityRequest* request, ::grpc::experimental::ClientReadReactor< ::birdy_grpc::UserInfo>* reactor) = 0;
      #endif
      virtual void AddBirdWithData(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest* request, ::birdy_grpc::AddBirdWithDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddBirdWithData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::AddBirdWithDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddBirdWithData(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest* request, ::birdy_grpc::AddBirdWithDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddBirdWithData(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest* request, ::birdy_grpc::AddBirdWithDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddBirdWithData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::AddBirdWithDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddBirdWithData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::AddBirdWithDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SendMessage(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest* request, ::birdy_grpc::SendMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::SendMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendMessage(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest* request, ::birdy_grpc::SendMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendMessage(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest* request, ::birdy_grpc::SendMessageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::SendMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::SendMessageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubscribeToNewMessages(::grpc::ClientContext* context, ::birdy_grpc::Empty* request, ::grpc::ClientReadReactor< ::birdy_grpc::ChatMessage>* reactor) = 0;
      #else
      virtual void SubscribeToNewMessages(::grpc::ClientContext* context, ::birdy_grpc::Empty* request, ::grpc::experimental::ClientReadReactor< ::birdy_grpc::ChatMessage>* reactor) = 0;
      #endif
      virtual void UpdateUser(::grpc::ClientContext* context, const ::birdy_grpc::UserInfo* request, ::birdy_grpc::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateUser(::grpc::ClientContext* context, const ::birdy_grpc::UserInfo* request, ::birdy_grpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateUser(::grpc::ClientContext* context, const ::birdy_grpc::UserInfo* request, ::birdy_grpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTopBirds(::grpc::ClientContext* context, ::birdy_grpc::GetTopBirdsRequest* request, ::grpc::ClientReadReactor< ::birdy_grpc::EncyclopedicBirdInfo>* reactor) = 0;
      #else
      virtual void GetTopBirds(::grpc::ClientContext* context, ::birdy_grpc::GetTopBirdsRequest* request, ::grpc::experimental::ClientReadReactor< ::birdy_grpc::EncyclopedicBirdInfo>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::RegistrationResponse>* AsyncRegisterUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::RegistrationResponse>* PrepareAsyncRegisterUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::LoginResponse>* AsyncLoginUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::LoginResponse>* PrepareAsyncLoginUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::birdy_grpc::FindBirdByNameResponse>* FindBirdByNameRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdByNameRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::FindBirdByNameResponse>* AsyncFindBirdByNameRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdByNameRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::FindBirdByNameResponse>* PrepareAsyncFindBirdByNameRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdByNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::birdy_grpc::FindBirdCoordinatesByNameResponse>* FindBirdCoordinatesByNameRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdCoordinatesByNameRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::FindBirdCoordinatesByNameResponse>* AsyncFindBirdCoordinatesByNameRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdCoordinatesByNameRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::FindBirdCoordinatesByNameResponse>* PrepareAsyncFindBirdCoordinatesByNameRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdCoordinatesByNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::birdy_grpc::UserInfo>* BindBoysByCityRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBoysByCityRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::UserInfo>* AsyncBindBoysByCityRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBoysByCityRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::UserInfo>* PrepareAsyncBindBoysByCityRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBoysByCityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::AddBirdWithDataResponse>* AsyncAddBirdWithDataRaw(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::AddBirdWithDataResponse>* PrepareAsyncAddBirdWithDataRaw(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::SendMessageResponse>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::SendMessageResponse>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::birdy_grpc::ChatMessage>* SubscribeToNewMessagesRaw(::grpc::ClientContext* context, const ::birdy_grpc::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::ChatMessage>* AsyncSubscribeToNewMessagesRaw(::grpc::ClientContext* context, const ::birdy_grpc::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::ChatMessage>* PrepareAsyncSubscribeToNewMessagesRaw(::grpc::ClientContext* context, const ::birdy_grpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::Empty>* AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::UserInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::Empty>* PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::UserInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::birdy_grpc::EncyclopedicBirdInfo>* GetTopBirdsRaw(::grpc::ClientContext* context, const ::birdy_grpc::GetTopBirdsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::EncyclopedicBirdInfo>* AsyncGetTopBirdsRaw(::grpc::ClientContext* context, const ::birdy_grpc::GetTopBirdsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::birdy_grpc::EncyclopedicBirdInfo>* PrepareAsyncGetTopBirdsRaw(::grpc::ClientContext* context, const ::birdy_grpc::GetTopBirdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::birdy_grpc::RegistrationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::RegistrationResponse>> AsyncRegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::RegistrationResponse>>(AsyncRegisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::RegistrationResponse>> PrepareAsyncRegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::RegistrationResponse>>(PrepareAsyncRegisterUserRaw(context, request, cq));
    }
    ::grpc::Status LoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::birdy_grpc::LoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::LoginResponse>> AsyncLoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::LoginResponse>>(AsyncLoginUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::LoginResponse>> PrepareAsyncLoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::LoginResponse>>(PrepareAsyncLoginUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::birdy_grpc::FindBirdByNameResponse>> FindBirdByName(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdByNameRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::birdy_grpc::FindBirdByNameResponse>>(FindBirdByNameRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::birdy_grpc::FindBirdByNameResponse>> AsyncFindBirdByName(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdByNameRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::birdy_grpc::FindBirdByNameResponse>>(AsyncFindBirdByNameRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::birdy_grpc::FindBirdByNameResponse>> PrepareAsyncFindBirdByName(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdByNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::birdy_grpc::FindBirdByNameResponse>>(PrepareAsyncFindBirdByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::birdy_grpc::FindBirdCoordinatesByNameResponse>> FindBirdCoordinatesByName(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdCoordinatesByNameRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::birdy_grpc::FindBirdCoordinatesByNameResponse>>(FindBirdCoordinatesByNameRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::birdy_grpc::FindBirdCoordinatesByNameResponse>> AsyncFindBirdCoordinatesByName(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdCoordinatesByNameRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::birdy_grpc::FindBirdCoordinatesByNameResponse>>(AsyncFindBirdCoordinatesByNameRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::birdy_grpc::FindBirdCoordinatesByNameResponse>> PrepareAsyncFindBirdCoordinatesByName(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdCoordinatesByNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::birdy_grpc::FindBirdCoordinatesByNameResponse>>(PrepareAsyncFindBirdCoordinatesByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::birdy_grpc::UserInfo>> BindBoysByCity(::grpc::ClientContext* context, const ::birdy_grpc::FindBoysByCityRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::birdy_grpc::UserInfo>>(BindBoysByCityRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::birdy_grpc::UserInfo>> AsyncBindBoysByCity(::grpc::ClientContext* context, const ::birdy_grpc::FindBoysByCityRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::birdy_grpc::UserInfo>>(AsyncBindBoysByCityRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::birdy_grpc::UserInfo>> PrepareAsyncBindBoysByCity(::grpc::ClientContext* context, const ::birdy_grpc::FindBoysByCityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::birdy_grpc::UserInfo>>(PrepareAsyncBindBoysByCityRaw(context, request, cq));
    }
    ::grpc::Status AddBirdWithData(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest& request, ::birdy_grpc::AddBirdWithDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::AddBirdWithDataResponse>> AsyncAddBirdWithData(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::AddBirdWithDataResponse>>(AsyncAddBirdWithDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::AddBirdWithDataResponse>> PrepareAsyncAddBirdWithData(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::AddBirdWithDataResponse>>(PrepareAsyncAddBirdWithDataRaw(context, request, cq));
    }
    ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest& request, ::birdy_grpc::SendMessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::SendMessageResponse>> AsyncSendMessage(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::SendMessageResponse>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::SendMessageResponse>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::SendMessageResponse>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::birdy_grpc::ChatMessage>> SubscribeToNewMessages(::grpc::ClientContext* context, const ::birdy_grpc::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::birdy_grpc::ChatMessage>>(SubscribeToNewMessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::birdy_grpc::ChatMessage>> AsyncSubscribeToNewMessages(::grpc::ClientContext* context, const ::birdy_grpc::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::birdy_grpc::ChatMessage>>(AsyncSubscribeToNewMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::birdy_grpc::ChatMessage>> PrepareAsyncSubscribeToNewMessages(::grpc::ClientContext* context, const ::birdy_grpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::birdy_grpc::ChatMessage>>(PrepareAsyncSubscribeToNewMessagesRaw(context, request, cq));
    }
    ::grpc::Status UpdateUser(::grpc::ClientContext* context, const ::birdy_grpc::UserInfo& request, ::birdy_grpc::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::Empty>> AsyncUpdateUser(::grpc::ClientContext* context, const ::birdy_grpc::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::Empty>>(AsyncUpdateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::Empty>> PrepareAsyncUpdateUser(::grpc::ClientContext* context, const ::birdy_grpc::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::Empty>>(PrepareAsyncUpdateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::birdy_grpc::EncyclopedicBirdInfo>> GetTopBirds(::grpc::ClientContext* context, const ::birdy_grpc::GetTopBirdsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::birdy_grpc::EncyclopedicBirdInfo>>(GetTopBirdsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::birdy_grpc::EncyclopedicBirdInfo>> AsyncGetTopBirds(::grpc::ClientContext* context, const ::birdy_grpc::GetTopBirdsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::birdy_grpc::EncyclopedicBirdInfo>>(AsyncGetTopBirdsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::birdy_grpc::EncyclopedicBirdInfo>> PrepareAsyncGetTopBirds(::grpc::ClientContext* context, const ::birdy_grpc::GetTopBirdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::birdy_grpc::EncyclopedicBirdInfo>>(PrepareAsyncGetTopBirdsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest* request, ::birdy_grpc::RegistrationResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::RegistrationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest* request, ::birdy_grpc::RegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest* request, ::birdy_grpc::RegistrationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::RegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::RegistrationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void LoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest* request, ::birdy_grpc::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void LoginUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest* request, ::birdy_grpc::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest* request, ::birdy_grpc::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LoginUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LoginUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FindBirdByName(::grpc::ClientContext* context, ::birdy_grpc::FindBirdByNameRequest* request, ::grpc::ClientReadReactor< ::birdy_grpc::FindBirdByNameResponse>* reactor) override;
      #else
      void FindBirdByName(::grpc::ClientContext* context, ::birdy_grpc::FindBirdByNameRequest* request, ::grpc::experimental::ClientReadReactor< ::birdy_grpc::FindBirdByNameResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FindBirdCoordinatesByName(::grpc::ClientContext* context, ::birdy_grpc::FindBirdCoordinatesByNameRequest* request, ::grpc::ClientReadReactor< ::birdy_grpc::FindBirdCoordinatesByNameResponse>* reactor) override;
      #else
      void FindBirdCoordinatesByName(::grpc::ClientContext* context, ::birdy_grpc::FindBirdCoordinatesByNameRequest* request, ::grpc::experimental::ClientReadReactor< ::birdy_grpc::FindBirdCoordinatesByNameResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void BindBoysByCity(::grpc::ClientContext* context, ::birdy_grpc::FindBoysByCityRequest* request, ::grpc::ClientReadReactor< ::birdy_grpc::UserInfo>* reactor) override;
      #else
      void BindBoysByCity(::grpc::ClientContext* context, ::birdy_grpc::FindBoysByCityRequest* request, ::grpc::experimental::ClientReadReactor< ::birdy_grpc::UserInfo>* reactor) override;
      #endif
      void AddBirdWithData(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest* request, ::birdy_grpc::AddBirdWithDataResponse* response, std::function<void(::grpc::Status)>) override;
      void AddBirdWithData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::AddBirdWithDataResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddBirdWithData(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest* request, ::birdy_grpc::AddBirdWithDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddBirdWithData(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest* request, ::birdy_grpc::AddBirdWithDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddBirdWithData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::AddBirdWithDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddBirdWithData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::AddBirdWithDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SendMessage(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest* request, ::birdy_grpc::SendMessageResponse* response, std::function<void(::grpc::Status)>) override;
      void SendMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::SendMessageResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendMessage(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest* request, ::birdy_grpc::SendMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendMessage(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest* request, ::birdy_grpc::SendMessageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::SendMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::SendMessageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubscribeToNewMessages(::grpc::ClientContext* context, ::birdy_grpc::Empty* request, ::grpc::ClientReadReactor< ::birdy_grpc::ChatMessage>* reactor) override;
      #else
      void SubscribeToNewMessages(::grpc::ClientContext* context, ::birdy_grpc::Empty* request, ::grpc::experimental::ClientReadReactor< ::birdy_grpc::ChatMessage>* reactor) override;
      #endif
      void UpdateUser(::grpc::ClientContext* context, const ::birdy_grpc::UserInfo* request, ::birdy_grpc::Empty* response, std::function<void(::grpc::Status)>) override;
      void UpdateUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateUser(::grpc::ClientContext* context, const ::birdy_grpc::UserInfo* request, ::birdy_grpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateUser(::grpc::ClientContext* context, const ::birdy_grpc::UserInfo* request, ::birdy_grpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTopBirds(::grpc::ClientContext* context, ::birdy_grpc::GetTopBirdsRequest* request, ::grpc::ClientReadReactor< ::birdy_grpc::EncyclopedicBirdInfo>* reactor) override;
      #else
      void GetTopBirds(::grpc::ClientContext* context, ::birdy_grpc::GetTopBirdsRequest* request, ::grpc::experimental::ClientReadReactor< ::birdy_grpc::EncyclopedicBirdInfo>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::birdy_grpc::RegistrationResponse>* AsyncRegisterUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::birdy_grpc::RegistrationResponse>* PrepareAsyncRegisterUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::birdy_grpc::LoginResponse>* AsyncLoginUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::birdy_grpc::LoginResponse>* PrepareAsyncLoginUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::birdy_grpc::FindBirdByNameResponse>* FindBirdByNameRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdByNameRequest& request) override;
    ::grpc::ClientAsyncReader< ::birdy_grpc::FindBirdByNameResponse>* AsyncFindBirdByNameRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdByNameRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::birdy_grpc::FindBirdByNameResponse>* PrepareAsyncFindBirdByNameRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdByNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::birdy_grpc::FindBirdCoordinatesByNameResponse>* FindBirdCoordinatesByNameRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdCoordinatesByNameRequest& request) override;
    ::grpc::ClientAsyncReader< ::birdy_grpc::FindBirdCoordinatesByNameResponse>* AsyncFindBirdCoordinatesByNameRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdCoordinatesByNameRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::birdy_grpc::FindBirdCoordinatesByNameResponse>* PrepareAsyncFindBirdCoordinatesByNameRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdCoordinatesByNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::birdy_grpc::UserInfo>* BindBoysByCityRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBoysByCityRequest& request) override;
    ::grpc::ClientAsyncReader< ::birdy_grpc::UserInfo>* AsyncBindBoysByCityRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBoysByCityRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::birdy_grpc::UserInfo>* PrepareAsyncBindBoysByCityRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBoysByCityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::birdy_grpc::AddBirdWithDataResponse>* AsyncAddBirdWithDataRaw(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::birdy_grpc::AddBirdWithDataResponse>* PrepareAsyncAddBirdWithDataRaw(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::birdy_grpc::SendMessageResponse>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::birdy_grpc::SendMessageResponse>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::birdy_grpc::ChatMessage>* SubscribeToNewMessagesRaw(::grpc::ClientContext* context, const ::birdy_grpc::Empty& request) override;
    ::grpc::ClientAsyncReader< ::birdy_grpc::ChatMessage>* AsyncSubscribeToNewMessagesRaw(::grpc::ClientContext* context, const ::birdy_grpc::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::birdy_grpc::ChatMessage>* PrepareAsyncSubscribeToNewMessagesRaw(::grpc::ClientContext* context, const ::birdy_grpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::birdy_grpc::Empty>* AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::UserInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::birdy_grpc::Empty>* PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::UserInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::birdy_grpc::EncyclopedicBirdInfo>* GetTopBirdsRaw(::grpc::ClientContext* context, const ::birdy_grpc::GetTopBirdsRequest& request) override;
    ::grpc::ClientAsyncReader< ::birdy_grpc::EncyclopedicBirdInfo>* AsyncGetTopBirdsRaw(::grpc::ClientContext* context, const ::birdy_grpc::GetTopBirdsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::birdy_grpc::EncyclopedicBirdInfo>* PrepareAsyncGetTopBirdsRaw(::grpc::ClientContext* context, const ::birdy_grpc::GetTopBirdsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterUser_;
    const ::grpc::internal::RpcMethod rpcmethod_LoginUser_;
    const ::grpc::internal::RpcMethod rpcmethod_FindBirdByName_;
    const ::grpc::internal::RpcMethod rpcmethod_FindBirdCoordinatesByName_;
    const ::grpc::internal::RpcMethod rpcmethod_BindBoysByCity_;
    const ::grpc::internal::RpcMethod rpcmethod_AddBirdWithData_;
    const ::grpc::internal::RpcMethod rpcmethod_SendMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeToNewMessages_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateUser_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTopBirds_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RegisterUser(::grpc::ServerContext* context, const ::birdy_grpc::RegistrationRequest* request, ::birdy_grpc::RegistrationResponse* response);
    virtual ::grpc::Status LoginUser(::grpc::ServerContext* context, const ::birdy_grpc::LoginRequest* request, ::birdy_grpc::LoginResponse* response);
    virtual ::grpc::Status FindBirdByName(::grpc::ServerContext* context, const ::birdy_grpc::FindBirdByNameRequest* request, ::grpc::ServerWriter< ::birdy_grpc::FindBirdByNameResponse>* writer);
    virtual ::grpc::Status FindBirdCoordinatesByName(::grpc::ServerContext* context, const ::birdy_grpc::FindBirdCoordinatesByNameRequest* request, ::grpc::ServerWriter< ::birdy_grpc::FindBirdCoordinatesByNameResponse>* writer);
    virtual ::grpc::Status BindBoysByCity(::grpc::ServerContext* context, const ::birdy_grpc::FindBoysByCityRequest* request, ::grpc::ServerWriter< ::birdy_grpc::UserInfo>* writer);
    virtual ::grpc::Status AddBirdWithData(::grpc::ServerContext* context, const ::birdy_grpc::AddBirdWithDataRequest* request, ::birdy_grpc::AddBirdWithDataResponse* response);
    virtual ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::birdy_grpc::SendMessageRequest* request, ::birdy_grpc::SendMessageResponse* response);
    virtual ::grpc::Status SubscribeToNewMessages(::grpc::ServerContext* context, const ::birdy_grpc::Empty* request, ::grpc::ServerWriter< ::birdy_grpc::ChatMessage>* writer);
    virtual ::grpc::Status UpdateUser(::grpc::ServerContext* context, const ::birdy_grpc::UserInfo* request, ::birdy_grpc::Empty* response);
    virtual ::grpc::Status GetTopBirds(::grpc::ServerContext* context, const ::birdy_grpc::GetTopBirdsRequest* request, ::grpc::ServerWriter< ::birdy_grpc::EncyclopedicBirdInfo>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::RegistrationRequest* /*request*/, ::birdy_grpc::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterUser(::grpc::ServerContext* context, ::birdy_grpc::RegistrationRequest* request, ::grpc::ServerAsyncResponseWriter< ::birdy_grpc::RegistrationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoginUser() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_LoginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::LoginRequest* /*request*/, ::birdy_grpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoginUser(::grpc::ServerContext* context, ::birdy_grpc::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::birdy_grpc::LoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindBirdByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindBirdByName() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_FindBirdByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindBirdByName(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBirdByNameRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::FindBirdByNameResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindBirdByName(::grpc::ServerContext* context, ::birdy_grpc::FindBirdByNameRequest* request, ::grpc::ServerAsyncWriter< ::birdy_grpc::FindBirdByNameResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindBirdCoordinatesByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindBirdCoordinatesByName() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_FindBirdCoordinatesByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindBirdCoordinatesByName(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBirdCoordinatesByNameRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::FindBirdCoordinatesByNameResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindBirdCoordinatesByName(::grpc::ServerContext* context, ::birdy_grpc::FindBirdCoordinatesByNameRequest* request, ::grpc::ServerAsyncWriter< ::birdy_grpc::FindBirdCoordinatesByNameResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BindBoysByCity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BindBoysByCity() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_BindBoysByCity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BindBoysByCity(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBoysByCityRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::UserInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBindBoysByCity(::grpc::ServerContext* context, ::birdy_grpc::FindBoysByCityRequest* request, ::grpc::ServerAsyncWriter< ::birdy_grpc::UserInfo>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddBirdWithData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddBirdWithData() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_AddBirdWithData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBirdWithData(::grpc::ServerContext* /*context*/, const ::birdy_grpc::AddBirdWithDataRequest* /*request*/, ::birdy_grpc::AddBirdWithDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddBirdWithData(::grpc::ServerContext* context, ::birdy_grpc::AddBirdWithDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::birdy_grpc::AddBirdWithDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendMessage() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::birdy_grpc::SendMessageRequest* /*request*/, ::birdy_grpc::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::birdy_grpc::SendMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::birdy_grpc::SendMessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeToNewMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeToNewMessages() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SubscribeToNewMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToNewMessages(::grpc::ServerContext* /*context*/, const ::birdy_grpc::Empty* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeToNewMessages(::grpc::ServerContext* context, ::birdy_grpc::Empty* request, ::grpc::ServerAsyncWriter< ::birdy_grpc::ChatMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateUser() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::UserInfo* /*request*/, ::birdy_grpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUser(::grpc::ServerContext* context, ::birdy_grpc::UserInfo* request, ::grpc::ServerAsyncResponseWriter< ::birdy_grpc::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTopBirds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTopBirds() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetTopBirds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTopBirds(::grpc::ServerContext* /*context*/, const ::birdy_grpc::GetTopBirdsRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::EncyclopedicBirdInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTopBirds(::grpc::ServerContext* context, ::birdy_grpc::GetTopBirdsRequest* request, ::grpc::ServerAsyncWriter< ::birdy_grpc::EncyclopedicBirdInfo>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterUser<WithAsyncMethod_LoginUser<WithAsyncMethod_FindBirdByName<WithAsyncMethod_FindBirdCoordinatesByName<WithAsyncMethod_BindBoysByCity<WithAsyncMethod_AddBirdWithData<WithAsyncMethod_SendMessage<WithAsyncMethod_SubscribeToNewMessages<WithAsyncMethod_UpdateUser<WithAsyncMethod_GetTopBirds<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::birdy_grpc::RegistrationRequest, ::birdy_grpc::RegistrationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::birdy_grpc::RegistrationRequest* request, ::birdy_grpc::RegistrationResponse* response) { return this->RegisterUser(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterUser(
        ::grpc::experimental::MessageAllocator< ::birdy_grpc::RegistrationRequest, ::birdy_grpc::RegistrationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::birdy_grpc::RegistrationRequest, ::birdy_grpc::RegistrationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::RegistrationRequest* /*request*/, ::birdy_grpc::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterUser(
      ::grpc::CallbackServerContext* /*context*/, const ::birdy_grpc::RegistrationRequest* /*request*/, ::birdy_grpc::RegistrationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterUser(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::birdy_grpc::RegistrationRequest* /*request*/, ::birdy_grpc::RegistrationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LoginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_LoginUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::birdy_grpc::LoginRequest, ::birdy_grpc::LoginResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::birdy_grpc::LoginRequest* request, ::birdy_grpc::LoginResponse* response) { return this->LoginUser(context, request, response); }));}
    void SetMessageAllocatorFor_LoginUser(
        ::grpc::experimental::MessageAllocator< ::birdy_grpc::LoginRequest, ::birdy_grpc::LoginResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::birdy_grpc::LoginRequest, ::birdy_grpc::LoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_LoginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::LoginRequest* /*request*/, ::birdy_grpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LoginUser(
      ::grpc::CallbackServerContext* /*context*/, const ::birdy_grpc::LoginRequest* /*request*/, ::birdy_grpc::LoginResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LoginUser(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::birdy_grpc::LoginRequest* /*request*/, ::birdy_grpc::LoginResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FindBirdByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FindBirdByName() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::birdy_grpc::FindBirdByNameRequest, ::birdy_grpc::FindBirdByNameResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::birdy_grpc::FindBirdByNameRequest* request) { return this->FindBirdByName(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_FindBirdByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindBirdByName(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBirdByNameRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::FindBirdByNameResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::birdy_grpc::FindBirdByNameResponse>* FindBirdByName(
      ::grpc::CallbackServerContext* /*context*/, const ::birdy_grpc::FindBirdByNameRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::birdy_grpc::FindBirdByNameResponse>* FindBirdByName(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::birdy_grpc::FindBirdByNameRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FindBirdCoordinatesByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FindBirdCoordinatesByName() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::birdy_grpc::FindBirdCoordinatesByNameRequest, ::birdy_grpc::FindBirdCoordinatesByNameResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::birdy_grpc::FindBirdCoordinatesByNameRequest* request) { return this->FindBirdCoordinatesByName(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_FindBirdCoordinatesByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindBirdCoordinatesByName(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBirdCoordinatesByNameRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::FindBirdCoordinatesByNameResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::birdy_grpc::FindBirdCoordinatesByNameResponse>* FindBirdCoordinatesByName(
      ::grpc::CallbackServerContext* /*context*/, const ::birdy_grpc::FindBirdCoordinatesByNameRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::birdy_grpc::FindBirdCoordinatesByNameResponse>* FindBirdCoordinatesByName(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::birdy_grpc::FindBirdCoordinatesByNameRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BindBoysByCity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_BindBoysByCity() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::birdy_grpc::FindBoysByCityRequest, ::birdy_grpc::UserInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::birdy_grpc::FindBoysByCityRequest* request) { return this->BindBoysByCity(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_BindBoysByCity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BindBoysByCity(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBoysByCityRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::UserInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::birdy_grpc::UserInfo>* BindBoysByCity(
      ::grpc::CallbackServerContext* /*context*/, const ::birdy_grpc::FindBoysByCityRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::birdy_grpc::UserInfo>* BindBoysByCity(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::birdy_grpc::FindBoysByCityRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddBirdWithData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddBirdWithData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::birdy_grpc::AddBirdWithDataRequest, ::birdy_grpc::AddBirdWithDataResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::birdy_grpc::AddBirdWithDataRequest* request, ::birdy_grpc::AddBirdWithDataResponse* response) { return this->AddBirdWithData(context, request, response); }));}
    void SetMessageAllocatorFor_AddBirdWithData(
        ::grpc::experimental::MessageAllocator< ::birdy_grpc::AddBirdWithDataRequest, ::birdy_grpc::AddBirdWithDataResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::birdy_grpc::AddBirdWithDataRequest, ::birdy_grpc::AddBirdWithDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddBirdWithData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBirdWithData(::grpc::ServerContext* /*context*/, const ::birdy_grpc::AddBirdWithDataRequest* /*request*/, ::birdy_grpc::AddBirdWithDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddBirdWithData(
      ::grpc::CallbackServerContext* /*context*/, const ::birdy_grpc::AddBirdWithDataRequest* /*request*/, ::birdy_grpc::AddBirdWithDataResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddBirdWithData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::birdy_grpc::AddBirdWithDataRequest* /*request*/, ::birdy_grpc::AddBirdWithDataResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendMessage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::birdy_grpc::SendMessageRequest, ::birdy_grpc::SendMessageResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::birdy_grpc::SendMessageRequest* request, ::birdy_grpc::SendMessageResponse* response) { return this->SendMessage(context, request, response); }));}
    void SetMessageAllocatorFor_SendMessage(
        ::grpc::experimental::MessageAllocator< ::birdy_grpc::SendMessageRequest, ::birdy_grpc::SendMessageResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::birdy_grpc::SendMessageRequest, ::birdy_grpc::SendMessageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::birdy_grpc::SendMessageRequest* /*request*/, ::birdy_grpc::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::birdy_grpc::SendMessageRequest* /*request*/, ::birdy_grpc::SendMessageResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendMessage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::birdy_grpc::SendMessageRequest* /*request*/, ::birdy_grpc::SendMessageResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeToNewMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeToNewMessages() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::birdy_grpc::Empty, ::birdy_grpc::ChatMessage>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::birdy_grpc::Empty* request) { return this->SubscribeToNewMessages(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeToNewMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToNewMessages(::grpc::ServerContext* /*context*/, const ::birdy_grpc::Empty* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::birdy_grpc::ChatMessage>* SubscribeToNewMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::birdy_grpc::Empty* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::birdy_grpc::ChatMessage>* SubscribeToNewMessages(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::birdy_grpc::Empty* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::birdy_grpc::UserInfo, ::birdy_grpc::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::birdy_grpc::UserInfo* request, ::birdy_grpc::Empty* response) { return this->UpdateUser(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateUser(
        ::grpc::experimental::MessageAllocator< ::birdy_grpc::UserInfo, ::birdy_grpc::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::birdy_grpc::UserInfo, ::birdy_grpc::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::UserInfo* /*request*/, ::birdy_grpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateUser(
      ::grpc::CallbackServerContext* /*context*/, const ::birdy_grpc::UserInfo* /*request*/, ::birdy_grpc::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateUser(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::birdy_grpc::UserInfo* /*request*/, ::birdy_grpc::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTopBirds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTopBirds() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::birdy_grpc::GetTopBirdsRequest, ::birdy_grpc::EncyclopedicBirdInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::birdy_grpc::GetTopBirdsRequest* request) { return this->GetTopBirds(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetTopBirds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTopBirds(::grpc::ServerContext* /*context*/, const ::birdy_grpc::GetTopBirdsRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::EncyclopedicBirdInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::birdy_grpc::EncyclopedicBirdInfo>* GetTopBirds(
      ::grpc::CallbackServerContext* /*context*/, const ::birdy_grpc::GetTopBirdsRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::birdy_grpc::EncyclopedicBirdInfo>* GetTopBirds(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::birdy_grpc::GetTopBirdsRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RegisterUser<ExperimentalWithCallbackMethod_LoginUser<ExperimentalWithCallbackMethod_FindBirdByName<ExperimentalWithCallbackMethod_FindBirdCoordinatesByName<ExperimentalWithCallbackMethod_BindBoysByCity<ExperimentalWithCallbackMethod_AddBirdWithData<ExperimentalWithCallbackMethod_SendMessage<ExperimentalWithCallbackMethod_SubscribeToNewMessages<ExperimentalWithCallbackMethod_UpdateUser<ExperimentalWithCallbackMethod_GetTopBirds<Service > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RegisterUser<ExperimentalWithCallbackMethod_LoginUser<ExperimentalWithCallbackMethod_FindBirdByName<ExperimentalWithCallbackMethod_FindBirdCoordinatesByName<ExperimentalWithCallbackMethod_BindBoysByCity<ExperimentalWithCallbackMethod_AddBirdWithData<ExperimentalWithCallbackMethod_SendMessage<ExperimentalWithCallbackMethod_SubscribeToNewMessages<ExperimentalWithCallbackMethod_UpdateUser<ExperimentalWithCallbackMethod_GetTopBirds<Service > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::RegistrationRequest* /*request*/, ::birdy_grpc::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoginUser() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_LoginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::LoginRequest* /*request*/, ::birdy_grpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindBirdByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindBirdByName() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_FindBirdByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindBirdByName(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBirdByNameRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::FindBirdByNameResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindBirdCoordinatesByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindBirdCoordinatesByName() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_FindBirdCoordinatesByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindBirdCoordinatesByName(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBirdCoordinatesByNameRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::FindBirdCoordinatesByNameResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BindBoysByCity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BindBoysByCity() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_BindBoysByCity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BindBoysByCity(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBoysByCityRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::UserInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddBirdWithData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddBirdWithData() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_AddBirdWithData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBirdWithData(::grpc::ServerContext* /*context*/, const ::birdy_grpc::AddBirdWithDataRequest* /*request*/, ::birdy_grpc::AddBirdWithDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendMessage() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::birdy_grpc::SendMessageRequest* /*request*/, ::birdy_grpc::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeToNewMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeToNewMessages() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SubscribeToNewMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToNewMessages(::grpc::ServerContext* /*context*/, const ::birdy_grpc::Empty* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateUser() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::UserInfo* /*request*/, ::birdy_grpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTopBirds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTopBirds() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetTopBirds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTopBirds(::grpc::ServerContext* /*context*/, const ::birdy_grpc::GetTopBirdsRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::EncyclopedicBirdInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::RegistrationRequest* /*request*/, ::birdy_grpc::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoginUser() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_LoginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::LoginRequest* /*request*/, ::birdy_grpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoginUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindBirdByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindBirdByName() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_FindBirdByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindBirdByName(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBirdByNameRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::FindBirdByNameResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindBirdByName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindBirdCoordinatesByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindBirdCoordinatesByName() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_FindBirdCoordinatesByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindBirdCoordinatesByName(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBirdCoordinatesByNameRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::FindBirdCoordinatesByNameResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindBirdCoordinatesByName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BindBoysByCity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BindBoysByCity() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_BindBoysByCity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BindBoysByCity(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBoysByCityRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::UserInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBindBoysByCity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddBirdWithData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddBirdWithData() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_AddBirdWithData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBirdWithData(::grpc::ServerContext* /*context*/, const ::birdy_grpc::AddBirdWithDataRequest* /*request*/, ::birdy_grpc::AddBirdWithDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddBirdWithData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendMessage() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::birdy_grpc::SendMessageRequest* /*request*/, ::birdy_grpc::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeToNewMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeToNewMessages() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SubscribeToNewMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToNewMessages(::grpc::ServerContext* /*context*/, const ::birdy_grpc::Empty* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeToNewMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateUser() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::UserInfo* /*request*/, ::birdy_grpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTopBirds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTopBirds() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetTopBirds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTopBirds(::grpc::ServerContext* /*context*/, const ::birdy_grpc::GetTopBirdsRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::EncyclopedicBirdInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTopBirds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterUser(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::RegistrationRequest* /*request*/, ::birdy_grpc::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterUser(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LoginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_LoginUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoginUser(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_LoginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::LoginRequest* /*request*/, ::birdy_grpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LoginUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LoginUser(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FindBirdByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FindBirdByName() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->FindBirdByName(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_FindBirdByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindBirdByName(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBirdByNameRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::FindBirdByNameResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FindBirdByName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* FindBirdByName(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FindBirdCoordinatesByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FindBirdCoordinatesByName() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->FindBirdCoordinatesByName(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_FindBirdCoordinatesByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindBirdCoordinatesByName(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBirdCoordinatesByNameRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::FindBirdCoordinatesByNameResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FindBirdCoordinatesByName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* FindBirdCoordinatesByName(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BindBoysByCity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_BindBoysByCity() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->BindBoysByCity(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_BindBoysByCity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BindBoysByCity(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBoysByCityRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::UserInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* BindBoysByCity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* BindBoysByCity(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddBirdWithData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddBirdWithData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddBirdWithData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddBirdWithData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBirdWithData(::grpc::ServerContext* /*context*/, const ::birdy_grpc::AddBirdWithDataRequest* /*request*/, ::birdy_grpc::AddBirdWithDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddBirdWithData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddBirdWithData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendMessage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendMessage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::birdy_grpc::SendMessageRequest* /*request*/, ::birdy_grpc::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendMessage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeToNewMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeToNewMessages() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->SubscribeToNewMessages(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeToNewMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeToNewMessages(::grpc::ServerContext* /*context*/, const ::birdy_grpc::Empty* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeToNewMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeToNewMessages(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateUser(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::UserInfo* /*request*/, ::birdy_grpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateUser(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTopBirds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTopBirds() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetTopBirds(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTopBirds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTopBirds(::grpc::ServerContext* /*context*/, const ::birdy_grpc::GetTopBirdsRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::EncyclopedicBirdInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetTopBirds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetTopBirds(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::birdy_grpc::RegistrationRequest, ::birdy_grpc::RegistrationResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::birdy_grpc::RegistrationRequest, ::birdy_grpc::RegistrationResponse>* streamer) {
                       return this->StreamedRegisterUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::RegistrationRequest* /*request*/, ::birdy_grpc::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::birdy_grpc::RegistrationRequest,::birdy_grpc::RegistrationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoginUser() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::birdy_grpc::LoginRequest, ::birdy_grpc::LoginResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::birdy_grpc::LoginRequest, ::birdy_grpc::LoginResponse>* streamer) {
                       return this->StreamedLoginUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoginUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::LoginRequest* /*request*/, ::birdy_grpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoginUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::birdy_grpc::LoginRequest,::birdy_grpc::LoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddBirdWithData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddBirdWithData() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::birdy_grpc::AddBirdWithDataRequest, ::birdy_grpc::AddBirdWithDataResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::birdy_grpc::AddBirdWithDataRequest, ::birdy_grpc::AddBirdWithDataResponse>* streamer) {
                       return this->StreamedAddBirdWithData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddBirdWithData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddBirdWithData(::grpc::ServerContext* /*context*/, const ::birdy_grpc::AddBirdWithDataRequest* /*request*/, ::birdy_grpc::AddBirdWithDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddBirdWithData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::birdy_grpc::AddBirdWithDataRequest,::birdy_grpc::AddBirdWithDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendMessage() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::birdy_grpc::SendMessageRequest, ::birdy_grpc::SendMessageResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::birdy_grpc::SendMessageRequest, ::birdy_grpc::SendMessageResponse>* streamer) {
                       return this->StreamedSendMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::birdy_grpc::SendMessageRequest* /*request*/, ::birdy_grpc::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::birdy_grpc::SendMessageRequest,::birdy_grpc::SendMessageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateUser() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::birdy_grpc::UserInfo, ::birdy_grpc::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::birdy_grpc::UserInfo, ::birdy_grpc::Empty>* streamer) {
                       return this->StreamedUpdateUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::UserInfo* /*request*/, ::birdy_grpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::birdy_grpc::UserInfo,::birdy_grpc::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterUser<WithStreamedUnaryMethod_LoginUser<WithStreamedUnaryMethod_AddBirdWithData<WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_UpdateUser<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_FindBirdByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FindBirdByName() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::birdy_grpc::FindBirdByNameRequest, ::birdy_grpc::FindBirdByNameResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::birdy_grpc::FindBirdByNameRequest, ::birdy_grpc::FindBirdByNameResponse>* streamer) {
                       return this->StreamedFindBirdByName(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FindBirdByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindBirdByName(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBirdByNameRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::FindBirdByNameResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFindBirdByName(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::birdy_grpc::FindBirdByNameRequest,::birdy_grpc::FindBirdByNameResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_FindBirdCoordinatesByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FindBirdCoordinatesByName() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::birdy_grpc::FindBirdCoordinatesByNameRequest, ::birdy_grpc::FindBirdCoordinatesByNameResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::birdy_grpc::FindBirdCoordinatesByNameRequest, ::birdy_grpc::FindBirdCoordinatesByNameResponse>* streamer) {
                       return this->StreamedFindBirdCoordinatesByName(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FindBirdCoordinatesByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindBirdCoordinatesByName(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBirdCoordinatesByNameRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::FindBirdCoordinatesByNameResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFindBirdCoordinatesByName(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::birdy_grpc::FindBirdCoordinatesByNameRequest,::birdy_grpc::FindBirdCoordinatesByNameResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_BindBoysByCity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_BindBoysByCity() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::birdy_grpc::FindBoysByCityRequest, ::birdy_grpc::UserInfo>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::birdy_grpc::FindBoysByCityRequest, ::birdy_grpc::UserInfo>* streamer) {
                       return this->StreamedBindBoysByCity(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_BindBoysByCity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BindBoysByCity(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBoysByCityRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::UserInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedBindBoysByCity(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::birdy_grpc::FindBoysByCityRequest,::birdy_grpc::UserInfo>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeToNewMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeToNewMessages() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::birdy_grpc::Empty, ::birdy_grpc::ChatMessage>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::birdy_grpc::Empty, ::birdy_grpc::ChatMessage>* streamer) {
                       return this->StreamedSubscribeToNewMessages(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeToNewMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeToNewMessages(::grpc::ServerContext* /*context*/, const ::birdy_grpc::Empty* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeToNewMessages(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::birdy_grpc::Empty,::birdy_grpc::ChatMessage>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetTopBirds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetTopBirds() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::birdy_grpc::GetTopBirdsRequest, ::birdy_grpc::EncyclopedicBirdInfo>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::birdy_grpc::GetTopBirdsRequest, ::birdy_grpc::EncyclopedicBirdInfo>* streamer) {
                       return this->StreamedGetTopBirds(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetTopBirds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTopBirds(::grpc::ServerContext* /*context*/, const ::birdy_grpc::GetTopBirdsRequest* /*request*/, ::grpc::ServerWriter< ::birdy_grpc::EncyclopedicBirdInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetTopBirds(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::birdy_grpc::GetTopBirdsRequest,::birdy_grpc::EncyclopedicBirdInfo>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_FindBirdByName<WithSplitStreamingMethod_FindBirdCoordinatesByName<WithSplitStreamingMethod_BindBoysByCity<WithSplitStreamingMethod_SubscribeToNewMessages<WithSplitStreamingMethod_GetTopBirds<Service > > > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterUser<WithStreamedUnaryMethod_LoginUser<WithSplitStreamingMethod_FindBirdByName<WithSplitStreamingMethod_FindBirdCoordinatesByName<WithSplitStreamingMethod_BindBoysByCity<WithStreamedUnaryMethod_AddBirdWithData<WithStreamedUnaryMethod_SendMessage<WithSplitStreamingMethod_SubscribeToNewMessages<WithStreamedUnaryMethod_UpdateUser<WithSplitStreamingMethod_GetTopBirds<Service > > > > > > > > > > StreamedService;
};

}  // namespace birdy_grpc


#endif  // GRPC_birdy_2eproto__INCLUDED
