// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: birdy.proto
#ifndef GRPC_birdy_2eproto__INCLUDED
#define GRPC_birdy_2eproto__INCLUDED

#include "../protobuf/birdy.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace birdy_grpc {

class MainEndpoint final {
 public:
  static constexpr char const* service_full_name() {
    return "birdy_grpc.MainEndpoint";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::birdy_grpc::RegistrationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::RegistrationResponse>> AsyncRegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::RegistrationResponse>>(AsyncRegisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::RegistrationResponse>> PrepareAsyncRegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::RegistrationResponse>>(PrepareAsyncRegisterUserRaw(context, request, cq));
    }
    virtual ::grpc::Status LoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::birdy_grpc::LoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::LoginResponse>> AsyncLoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::LoginResponse>>(AsyncLoginUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::LoginResponse>> PrepareAsyncLoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::LoginResponse>>(PrepareAsyncLoginUserRaw(context, request, cq));
    }
    virtual ::grpc::Status FindBird(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdRequest& request, ::birdy_grpc::FindBirdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::FindBirdResponse>> AsyncFindBird(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::FindBirdResponse>>(AsyncFindBirdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::FindBirdResponse>> PrepareAsyncFindBird(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::FindBirdResponse>>(PrepareAsyncFindBirdRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void RegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest* request, ::birdy_grpc::RegistrationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::RegistrationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest* request, ::birdy_grpc::RegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest* request, ::birdy_grpc::RegistrationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::RegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::RegistrationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void LoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest* request, ::birdy_grpc::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoginUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest* request, ::birdy_grpc::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest* request, ::birdy_grpc::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LoginUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LoginUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void FindBird(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdRequest* request, ::birdy_grpc::FindBirdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindBird(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::FindBirdResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FindBird(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdRequest* request, ::birdy_grpc::FindBirdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void FindBird(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdRequest* request, ::birdy_grpc::FindBirdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FindBird(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::FindBirdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void FindBird(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::FindBirdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::RegistrationResponse>* AsyncRegisterUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::RegistrationResponse>* PrepareAsyncRegisterUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::LoginResponse>* AsyncLoginUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::LoginResponse>* PrepareAsyncLoginUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::FindBirdResponse>* AsyncFindBirdRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::birdy_grpc::FindBirdResponse>* PrepareAsyncFindBirdRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::birdy_grpc::RegistrationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::RegistrationResponse>> AsyncRegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::RegistrationResponse>>(AsyncRegisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::RegistrationResponse>> PrepareAsyncRegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::RegistrationResponse>>(PrepareAsyncRegisterUserRaw(context, request, cq));
    }
    ::grpc::Status LoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::birdy_grpc::LoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::LoginResponse>> AsyncLoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::LoginResponse>>(AsyncLoginUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::LoginResponse>> PrepareAsyncLoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::LoginResponse>>(PrepareAsyncLoginUserRaw(context, request, cq));
    }
    ::grpc::Status FindBird(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdRequest& request, ::birdy_grpc::FindBirdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::FindBirdResponse>> AsyncFindBird(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::FindBirdResponse>>(AsyncFindBirdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::FindBirdResponse>> PrepareAsyncFindBird(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::birdy_grpc::FindBirdResponse>>(PrepareAsyncFindBirdRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest* request, ::birdy_grpc::RegistrationResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::RegistrationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest* request, ::birdy_grpc::RegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest* request, ::birdy_grpc::RegistrationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::RegistrationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::RegistrationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void LoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest* request, ::birdy_grpc::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void LoginUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest* request, ::birdy_grpc::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest* request, ::birdy_grpc::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LoginUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LoginUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void FindBird(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdRequest* request, ::birdy_grpc::FindBirdResponse* response, std::function<void(::grpc::Status)>) override;
      void FindBird(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::FindBirdResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FindBird(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdRequest* request, ::birdy_grpc::FindBirdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void FindBird(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdRequest* request, ::birdy_grpc::FindBirdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FindBird(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::FindBirdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void FindBird(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::FindBirdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::birdy_grpc::RegistrationResponse>* AsyncRegisterUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::birdy_grpc::RegistrationResponse>* PrepareAsyncRegisterUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::birdy_grpc::LoginResponse>* AsyncLoginUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::birdy_grpc::LoginResponse>* PrepareAsyncLoginUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::birdy_grpc::FindBirdResponse>* AsyncFindBirdRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::birdy_grpc::FindBirdResponse>* PrepareAsyncFindBirdRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterUser_;
    const ::grpc::internal::RpcMethod rpcmethod_LoginUser_;
    const ::grpc::internal::RpcMethod rpcmethod_FindBird_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RegisterUser(::grpc::ServerContext* context, const ::birdy_grpc::RegistrationRequest* request, ::birdy_grpc::RegistrationResponse* response);
    virtual ::grpc::Status LoginUser(::grpc::ServerContext* context, const ::birdy_grpc::LoginRequest* request, ::birdy_grpc::LoginResponse* response);
    virtual ::grpc::Status FindBird(::grpc::ServerContext* context, const ::birdy_grpc::FindBirdRequest* request, ::birdy_grpc::FindBirdResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::RegistrationRequest* /*request*/, ::birdy_grpc::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterUser(::grpc::ServerContext* context, ::birdy_grpc::RegistrationRequest* request, ::grpc::ServerAsyncResponseWriter< ::birdy_grpc::RegistrationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoginUser() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_LoginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::LoginRequest* /*request*/, ::birdy_grpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoginUser(::grpc::ServerContext* context, ::birdy_grpc::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::birdy_grpc::LoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindBird : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindBird() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_FindBird() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindBird(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBirdRequest* /*request*/, ::birdy_grpc::FindBirdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindBird(::grpc::ServerContext* context, ::birdy_grpc::FindBirdRequest* request, ::grpc::ServerAsyncResponseWriter< ::birdy_grpc::FindBirdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterUser<WithAsyncMethod_LoginUser<WithAsyncMethod_FindBird<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::birdy_grpc::RegistrationRequest, ::birdy_grpc::RegistrationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::birdy_grpc::RegistrationRequest* request, ::birdy_grpc::RegistrationResponse* response) { return this->RegisterUser(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterUser(
        ::grpc::experimental::MessageAllocator< ::birdy_grpc::RegistrationRequest, ::birdy_grpc::RegistrationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::birdy_grpc::RegistrationRequest, ::birdy_grpc::RegistrationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::RegistrationRequest* /*request*/, ::birdy_grpc::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterUser(
      ::grpc::CallbackServerContext* /*context*/, const ::birdy_grpc::RegistrationRequest* /*request*/, ::birdy_grpc::RegistrationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterUser(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::birdy_grpc::RegistrationRequest* /*request*/, ::birdy_grpc::RegistrationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LoginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_LoginUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::birdy_grpc::LoginRequest, ::birdy_grpc::LoginResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::birdy_grpc::LoginRequest* request, ::birdy_grpc::LoginResponse* response) { return this->LoginUser(context, request, response); }));}
    void SetMessageAllocatorFor_LoginUser(
        ::grpc::experimental::MessageAllocator< ::birdy_grpc::LoginRequest, ::birdy_grpc::LoginResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::birdy_grpc::LoginRequest, ::birdy_grpc::LoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_LoginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::LoginRequest* /*request*/, ::birdy_grpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LoginUser(
      ::grpc::CallbackServerContext* /*context*/, const ::birdy_grpc::LoginRequest* /*request*/, ::birdy_grpc::LoginResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LoginUser(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::birdy_grpc::LoginRequest* /*request*/, ::birdy_grpc::LoginResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FindBird : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FindBird() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::birdy_grpc::FindBirdRequest, ::birdy_grpc::FindBirdResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::birdy_grpc::FindBirdRequest* request, ::birdy_grpc::FindBirdResponse* response) { return this->FindBird(context, request, response); }));}
    void SetMessageAllocatorFor_FindBird(
        ::grpc::experimental::MessageAllocator< ::birdy_grpc::FindBirdRequest, ::birdy_grpc::FindBirdResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::birdy_grpc::FindBirdRequest, ::birdy_grpc::FindBirdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_FindBird() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindBird(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBirdRequest* /*request*/, ::birdy_grpc::FindBirdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FindBird(
      ::grpc::CallbackServerContext* /*context*/, const ::birdy_grpc::FindBirdRequest* /*request*/, ::birdy_grpc::FindBirdResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FindBird(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::birdy_grpc::FindBirdRequest* /*request*/, ::birdy_grpc::FindBirdResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RegisterUser<ExperimentalWithCallbackMethod_LoginUser<ExperimentalWithCallbackMethod_FindBird<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RegisterUser<ExperimentalWithCallbackMethod_LoginUser<ExperimentalWithCallbackMethod_FindBird<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::RegistrationRequest* /*request*/, ::birdy_grpc::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoginUser() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_LoginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::LoginRequest* /*request*/, ::birdy_grpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindBird : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindBird() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_FindBird() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindBird(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBirdRequest* /*request*/, ::birdy_grpc::FindBirdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::RegistrationRequest* /*request*/, ::birdy_grpc::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoginUser() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_LoginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::LoginRequest* /*request*/, ::birdy_grpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoginUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindBird : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindBird() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_FindBird() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindBird(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBirdRequest* /*request*/, ::birdy_grpc::FindBirdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindBird(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterUser(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::RegistrationRequest* /*request*/, ::birdy_grpc::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterUser(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LoginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_LoginUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoginUser(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_LoginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::LoginRequest* /*request*/, ::birdy_grpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LoginUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LoginUser(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FindBird : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FindBird() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindBird(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_FindBird() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindBird(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBirdRequest* /*request*/, ::birdy_grpc::FindBirdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FindBird(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FindBird(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::birdy_grpc::RegistrationRequest, ::birdy_grpc::RegistrationResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::birdy_grpc::RegistrationRequest, ::birdy_grpc::RegistrationResponse>* streamer) {
                       return this->StreamedRegisterUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::RegistrationRequest* /*request*/, ::birdy_grpc::RegistrationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::birdy_grpc::RegistrationRequest,::birdy_grpc::RegistrationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoginUser() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::birdy_grpc::LoginRequest, ::birdy_grpc::LoginResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::birdy_grpc::LoginRequest, ::birdy_grpc::LoginResponse>* streamer) {
                       return this->StreamedLoginUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoginUser(::grpc::ServerContext* /*context*/, const ::birdy_grpc::LoginRequest* /*request*/, ::birdy_grpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoginUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::birdy_grpc::LoginRequest,::birdy_grpc::LoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindBird : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindBird() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::birdy_grpc::FindBirdRequest, ::birdy_grpc::FindBirdResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::birdy_grpc::FindBirdRequest, ::birdy_grpc::FindBirdResponse>* streamer) {
                       return this->StreamedFindBird(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindBird() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindBird(::grpc::ServerContext* /*context*/, const ::birdy_grpc::FindBirdRequest* /*request*/, ::birdy_grpc::FindBirdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindBird(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::birdy_grpc::FindBirdRequest,::birdy_grpc::FindBirdResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterUser<WithStreamedUnaryMethod_LoginUser<WithStreamedUnaryMethod_FindBird<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterUser<WithStreamedUnaryMethod_LoginUser<WithStreamedUnaryMethod_FindBird<Service > > > StreamedService;
};

}  // namespace birdy_grpc


#endif  // GRPC_birdy_2eproto__INCLUDED
