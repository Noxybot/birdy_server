// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: birdy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_birdy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_birdy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_birdy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_birdy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_birdy_2eproto;
namespace birdy_grpc {
class BirdInfo;
class BirdInfoDefaultTypeInternal;
extern BirdInfoDefaultTypeInternal _BirdInfo_default_instance_;
class BirdInfo_Point;
class BirdInfo_PointDefaultTypeInternal;
extern BirdInfo_PointDefaultTypeInternal _BirdInfo_Point_default_instance_;
class FindBirdRequest;
class FindBirdRequestDefaultTypeInternal;
extern FindBirdRequestDefaultTypeInternal _FindBirdRequest_default_instance_;
class FindBirdResponse;
class FindBirdResponseDefaultTypeInternal;
extern FindBirdResponseDefaultTypeInternal _FindBirdResponse_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class RegistrationRequest;
class RegistrationRequestDefaultTypeInternal;
extern RegistrationRequestDefaultTypeInternal _RegistrationRequest_default_instance_;
class RegistrationResponse;
class RegistrationResponseDefaultTypeInternal;
extern RegistrationResponseDefaultTypeInternal _RegistrationResponse_default_instance_;
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace birdy_grpc
PROTOBUF_NAMESPACE_OPEN
template<> ::birdy_grpc::BirdInfo* Arena::CreateMaybeMessage<::birdy_grpc::BirdInfo>(Arena*);
template<> ::birdy_grpc::BirdInfo_Point* Arena::CreateMaybeMessage<::birdy_grpc::BirdInfo_Point>(Arena*);
template<> ::birdy_grpc::FindBirdRequest* Arena::CreateMaybeMessage<::birdy_grpc::FindBirdRequest>(Arena*);
template<> ::birdy_grpc::FindBirdResponse* Arena::CreateMaybeMessage<::birdy_grpc::FindBirdResponse>(Arena*);
template<> ::birdy_grpc::LoginRequest* Arena::CreateMaybeMessage<::birdy_grpc::LoginRequest>(Arena*);
template<> ::birdy_grpc::LoginResponse* Arena::CreateMaybeMessage<::birdy_grpc::LoginResponse>(Arena*);
template<> ::birdy_grpc::RegistrationRequest* Arena::CreateMaybeMessage<::birdy_grpc::RegistrationRequest>(Arena*);
template<> ::birdy_grpc::RegistrationResponse* Arena::CreateMaybeMessage<::birdy_grpc::RegistrationResponse>(Arena*);
template<> ::birdy_grpc::Timestamp* Arena::CreateMaybeMessage<::birdy_grpc::Timestamp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace birdy_grpc {

enum RegistrationResponse_Result : int {
  RegistrationResponse_Result_OK = 0,
  RegistrationResponse_Result_EMAIL_ALREADY_TAKEN = 1,
  RegistrationResponse_Result_RegistrationResponse_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RegistrationResponse_Result_RegistrationResponse_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RegistrationResponse_Result_IsValid(int value);
constexpr RegistrationResponse_Result RegistrationResponse_Result_Result_MIN = RegistrationResponse_Result_OK;
constexpr RegistrationResponse_Result RegistrationResponse_Result_Result_MAX = RegistrationResponse_Result_EMAIL_ALREADY_TAKEN;
constexpr int RegistrationResponse_Result_Result_ARRAYSIZE = RegistrationResponse_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegistrationResponse_Result_descriptor();
template<typename T>
inline const std::string& RegistrationResponse_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegistrationResponse_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegistrationResponse_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegistrationResponse_Result_descriptor(), enum_t_value);
}
inline bool RegistrationResponse_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegistrationResponse_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegistrationResponse_Result>(
    RegistrationResponse_Result_descriptor(), name, value);
}
enum LoginResponse_Result : int {
  LoginResponse_Result_OK = 0,
  LoginResponse_Result_WRONG_PASSWORD = 1,
  LoginResponse_Result_LOGIN_NOT_FOUND = 3,
  LoginResponse_Result_LoginResponse_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginResponse_Result_LoginResponse_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginResponse_Result_IsValid(int value);
constexpr LoginResponse_Result LoginResponse_Result_Result_MIN = LoginResponse_Result_OK;
constexpr LoginResponse_Result LoginResponse_Result_Result_MAX = LoginResponse_Result_LOGIN_NOT_FOUND;
constexpr int LoginResponse_Result_Result_ARRAYSIZE = LoginResponse_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginResponse_Result_descriptor();
template<typename T>
inline const std::string& LoginResponse_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginResponse_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginResponse_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginResponse_Result_descriptor(), enum_t_value);
}
inline bool LoginResponse_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginResponse_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginResponse_Result>(
    LoginResponse_Result_descriptor(), name, value);
}
enum FindBirdRequest_FindType : int {
  FindBirdRequest_FindType_BY_PHOTO = 0,
  FindBirdRequest_FindType_BY_SOUND = 1,
  FindBirdRequest_FindType_FindBirdRequest_FindType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FindBirdRequest_FindType_FindBirdRequest_FindType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FindBirdRequest_FindType_IsValid(int value);
constexpr FindBirdRequest_FindType FindBirdRequest_FindType_FindType_MIN = FindBirdRequest_FindType_BY_PHOTO;
constexpr FindBirdRequest_FindType FindBirdRequest_FindType_FindType_MAX = FindBirdRequest_FindType_BY_SOUND;
constexpr int FindBirdRequest_FindType_FindType_ARRAYSIZE = FindBirdRequest_FindType_FindType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FindBirdRequest_FindType_descriptor();
template<typename T>
inline const std::string& FindBirdRequest_FindType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FindBirdRequest_FindType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FindBirdRequest_FindType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FindBirdRequest_FindType_descriptor(), enum_t_value);
}
inline bool FindBirdRequest_FindType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FindBirdRequest_FindType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FindBirdRequest_FindType>(
    FindBirdRequest_FindType_descriptor(), name, value);
}
enum FindBirdResponse_Result : int {
  FindBirdResponse_Result_FOUND = 0,
  FindBirdResponse_Result_NOT_FOUND = 1,
  FindBirdResponse_Result_FindBirdResponse_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FindBirdResponse_Result_FindBirdResponse_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FindBirdResponse_Result_IsValid(int value);
constexpr FindBirdResponse_Result FindBirdResponse_Result_Result_MIN = FindBirdResponse_Result_FOUND;
constexpr FindBirdResponse_Result FindBirdResponse_Result_Result_MAX = FindBirdResponse_Result_NOT_FOUND;
constexpr int FindBirdResponse_Result_Result_ARRAYSIZE = FindBirdResponse_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FindBirdResponse_Result_descriptor();
template<typename T>
inline const std::string& FindBirdResponse_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FindBirdResponse_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FindBirdResponse_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FindBirdResponse_Result_descriptor(), enum_t_value);
}
inline bool FindBirdResponse_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FindBirdResponse_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FindBirdResponse_Result>(
    FindBirdResponse_Result_descriptor(), name, value);
}
// ===================================================================

class RegistrationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:birdy_grpc.RegistrationRequest) */ {
 public:
  inline RegistrationRequest() : RegistrationRequest(nullptr) {}
  virtual ~RegistrationRequest();

  RegistrationRequest(const RegistrationRequest& from);
  RegistrationRequest(RegistrationRequest&& from) noexcept
    : RegistrationRequest() {
    *this = ::std::move(from);
  }

  inline RegistrationRequest& operator=(const RegistrationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegistrationRequest& operator=(RegistrationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegistrationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegistrationRequest* internal_default_instance() {
    return reinterpret_cast<const RegistrationRequest*>(
               &_RegistrationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegistrationRequest& a, RegistrationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegistrationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegistrationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegistrationRequest* New() const final {
    return CreateMaybeMessage<RegistrationRequest>(nullptr);
  }

  RegistrationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegistrationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegistrationRequest& from);
  void MergeFrom(const RegistrationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegistrationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "birdy_grpc.RegistrationRequest";
  }
  protected:
  explicit RegistrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_birdy_2eproto);
    return ::descriptor_table_birdy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 1,
    kMiddleNameFieldNumber = 2,
    kLastNameFieldNumber = 3,
    kBirthDateFieldNumber = 4,
    kCityFieldNumber = 5,
    kEmailFieldNumber = 6,
    kPasswordFieldNumber = 7,
  };
  // string first_name = 1;
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string middle_name = 2;
  void clear_middle_name();
  const std::string& middle_name() const;
  void set_middle_name(const std::string& value);
  void set_middle_name(std::string&& value);
  void set_middle_name(const char* value);
  void set_middle_name(const char* value, size_t size);
  std::string* mutable_middle_name();
  std::string* release_middle_name();
  void set_allocated_middle_name(std::string* middle_name);
  private:
  const std::string& _internal_middle_name() const;
  void _internal_set_middle_name(const std::string& value);
  std::string* _internal_mutable_middle_name();
  public:

  // string last_name = 3;
  void clear_last_name();
  const std::string& last_name() const;
  void set_last_name(const std::string& value);
  void set_last_name(std::string&& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  std::string* mutable_last_name();
  std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string birth_date = 4;
  void clear_birth_date();
  const std::string& birth_date() const;
  void set_birth_date(const std::string& value);
  void set_birth_date(std::string&& value);
  void set_birth_date(const char* value);
  void set_birth_date(const char* value, size_t size);
  std::string* mutable_birth_date();
  std::string* release_birth_date();
  void set_allocated_birth_date(std::string* birth_date);
  private:
  const std::string& _internal_birth_date() const;
  void _internal_set_birth_date(const std::string& value);
  std::string* _internal_mutable_birth_date();
  public:

  // string city = 5;
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string email = 6;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string password = 7;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:birdy_grpc.RegistrationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr middle_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr birth_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_birdy_2eproto;
};
// -------------------------------------------------------------------

class RegistrationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:birdy_grpc.RegistrationResponse) */ {
 public:
  inline RegistrationResponse() : RegistrationResponse(nullptr) {}
  virtual ~RegistrationResponse();

  RegistrationResponse(const RegistrationResponse& from);
  RegistrationResponse(RegistrationResponse&& from) noexcept
    : RegistrationResponse() {
    *this = ::std::move(from);
  }

  inline RegistrationResponse& operator=(const RegistrationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegistrationResponse& operator=(RegistrationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegistrationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegistrationResponse* internal_default_instance() {
    return reinterpret_cast<const RegistrationResponse*>(
               &_RegistrationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegistrationResponse& a, RegistrationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegistrationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegistrationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegistrationResponse* New() const final {
    return CreateMaybeMessage<RegistrationResponse>(nullptr);
  }

  RegistrationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegistrationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegistrationResponse& from);
  void MergeFrom(const RegistrationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegistrationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "birdy_grpc.RegistrationResponse";
  }
  protected:
  explicit RegistrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_birdy_2eproto);
    return ::descriptor_table_birdy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RegistrationResponse_Result Result;
  static constexpr Result OK =
    RegistrationResponse_Result_OK;
  static constexpr Result EMAIL_ALREADY_TAKEN =
    RegistrationResponse_Result_EMAIL_ALREADY_TAKEN;
  static inline bool Result_IsValid(int value) {
    return RegistrationResponse_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    RegistrationResponse_Result_Result_MIN;
  static constexpr Result Result_MAX =
    RegistrationResponse_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    RegistrationResponse_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return RegistrationResponse_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return RegistrationResponse_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return RegistrationResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .birdy_grpc.RegistrationResponse.Result result = 1;
  void clear_result();
  ::birdy_grpc::RegistrationResponse_Result result() const;
  void set_result(::birdy_grpc::RegistrationResponse_Result value);
  private:
  ::birdy_grpc::RegistrationResponse_Result _internal_result() const;
  void _internal_set_result(::birdy_grpc::RegistrationResponse_Result value);
  public:

  // @@protoc_insertion_point(class_scope:birdy_grpc.RegistrationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_birdy_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:birdy_grpc.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {}
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "birdy_grpc.LoginRequest";
  }
  protected:
  explicit LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_birdy_2eproto);
    return ::descriptor_table_birdy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:birdy_grpc.LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_birdy_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:birdy_grpc.LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {}
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(nullptr);
  }

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "birdy_grpc.LoginResponse";
  }
  protected:
  explicit LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_birdy_2eproto);
    return ::descriptor_table_birdy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoginResponse_Result Result;
  static constexpr Result OK =
    LoginResponse_Result_OK;
  static constexpr Result WRONG_PASSWORD =
    LoginResponse_Result_WRONG_PASSWORD;
  static constexpr Result LOGIN_NOT_FOUND =
    LoginResponse_Result_LOGIN_NOT_FOUND;
  static inline bool Result_IsValid(int value) {
    return LoginResponse_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    LoginResponse_Result_Result_MIN;
  static constexpr Result Result_MAX =
    LoginResponse_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    LoginResponse_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return LoginResponse_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return LoginResponse_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return LoginResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .birdy_grpc.LoginResponse.Result result = 1;
  void clear_result();
  ::birdy_grpc::LoginResponse_Result result() const;
  void set_result(::birdy_grpc::LoginResponse_Result value);
  private:
  ::birdy_grpc::LoginResponse_Result _internal_result() const;
  void _internal_set_result(::birdy_grpc::LoginResponse_Result value);
  public:

  // @@protoc_insertion_point(class_scope:birdy_grpc.LoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_birdy_2eproto;
};
// -------------------------------------------------------------------

class Timestamp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:birdy_grpc.Timestamp) */ {
 public:
  inline Timestamp() : Timestamp(nullptr) {}
  virtual ~Timestamp();

  Timestamp(const Timestamp& from);
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Timestamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(Timestamp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Timestamp* New() const final {
    return CreateMaybeMessage<Timestamp>(nullptr);
  }

  Timestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "birdy_grpc.Timestamp";
  }
  protected:
  explicit Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_birdy_2eproto);
    return ::descriptor_table_birdy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
    kNanosFieldNumber = 2,
  };
  // int64 seconds = 1;
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::int64 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seconds() const;
  void _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 nanos = 2;
  void clear_nanos();
  ::PROTOBUF_NAMESPACE_ID::int32 nanos() const;
  void set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nanos() const;
  void _internal_set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:birdy_grpc.Timestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 nanos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_birdy_2eproto;
};
// -------------------------------------------------------------------

class BirdInfo_Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:birdy_grpc.BirdInfo.Point) */ {
 public:
  inline BirdInfo_Point() : BirdInfo_Point(nullptr) {}
  virtual ~BirdInfo_Point();

  BirdInfo_Point(const BirdInfo_Point& from);
  BirdInfo_Point(BirdInfo_Point&& from) noexcept
    : BirdInfo_Point() {
    *this = ::std::move(from);
  }

  inline BirdInfo_Point& operator=(const BirdInfo_Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline BirdInfo_Point& operator=(BirdInfo_Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BirdInfo_Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BirdInfo_Point* internal_default_instance() {
    return reinterpret_cast<const BirdInfo_Point*>(
               &_BirdInfo_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BirdInfo_Point& a, BirdInfo_Point& b) {
    a.Swap(&b);
  }
  inline void Swap(BirdInfo_Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BirdInfo_Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BirdInfo_Point* New() const final {
    return CreateMaybeMessage<BirdInfo_Point>(nullptr);
  }

  BirdInfo_Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BirdInfo_Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BirdInfo_Point& from);
  void MergeFrom(const BirdInfo_Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BirdInfo_Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "birdy_grpc.BirdInfo.Point";
  }
  protected:
  explicit BirdInfo_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_birdy_2eproto);
    return ::descriptor_table_birdy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // double latitude = 1;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:birdy_grpc.BirdInfo.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latitude_;
  double longitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_birdy_2eproto;
};
// -------------------------------------------------------------------

class BirdInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:birdy_grpc.BirdInfo) */ {
 public:
  inline BirdInfo() : BirdInfo(nullptr) {}
  virtual ~BirdInfo();

  BirdInfo(const BirdInfo& from);
  BirdInfo(BirdInfo&& from) noexcept
    : BirdInfo() {
    *this = ::std::move(from);
  }

  inline BirdInfo& operator=(const BirdInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BirdInfo& operator=(BirdInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BirdInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BirdInfo* internal_default_instance() {
    return reinterpret_cast<const BirdInfo*>(
               &_BirdInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BirdInfo& a, BirdInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BirdInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BirdInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BirdInfo* New() const final {
    return CreateMaybeMessage<BirdInfo>(nullptr);
  }

  BirdInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BirdInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BirdInfo& from);
  void MergeFrom(const BirdInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BirdInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "birdy_grpc.BirdInfo";
  }
  protected:
  explicit BirdInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_birdy_2eproto);
    return ::descriptor_table_birdy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BirdInfo_Point Point;

  // accessors -------------------------------------------------------

  enum : int {
    kFinderEmailFieldNumber = 3,
    kPhotoFieldNumber = 4,
    kSoundFieldNumber = 5,
    kFoundPointFieldNumber = 1,
    kFoundTimeFieldNumber = 2,
  };
  // string finder_email = 3;
  void clear_finder_email();
  const std::string& finder_email() const;
  void set_finder_email(const std::string& value);
  void set_finder_email(std::string&& value);
  void set_finder_email(const char* value);
  void set_finder_email(const char* value, size_t size);
  std::string* mutable_finder_email();
  std::string* release_finder_email();
  void set_allocated_finder_email(std::string* finder_email);
  private:
  const std::string& _internal_finder_email() const;
  void _internal_set_finder_email(const std::string& value);
  std::string* _internal_mutable_finder_email();
  public:

  // bytes photo = 4;
  void clear_photo();
  const std::string& photo() const;
  void set_photo(const std::string& value);
  void set_photo(std::string&& value);
  void set_photo(const char* value);
  void set_photo(const void* value, size_t size);
  std::string* mutable_photo();
  std::string* release_photo();
  void set_allocated_photo(std::string* photo);
  private:
  const std::string& _internal_photo() const;
  void _internal_set_photo(const std::string& value);
  std::string* _internal_mutable_photo();
  public:

  // bytes sound = 5;
  void clear_sound();
  const std::string& sound() const;
  void set_sound(const std::string& value);
  void set_sound(std::string&& value);
  void set_sound(const char* value);
  void set_sound(const void* value, size_t size);
  std::string* mutable_sound();
  std::string* release_sound();
  void set_allocated_sound(std::string* sound);
  private:
  const std::string& _internal_sound() const;
  void _internal_set_sound(const std::string& value);
  std::string* _internal_mutable_sound();
  public:

  // .birdy_grpc.BirdInfo.Point found_point = 1;
  bool has_found_point() const;
  private:
  bool _internal_has_found_point() const;
  public:
  void clear_found_point();
  const ::birdy_grpc::BirdInfo_Point& found_point() const;
  ::birdy_grpc::BirdInfo_Point* release_found_point();
  ::birdy_grpc::BirdInfo_Point* mutable_found_point();
  void set_allocated_found_point(::birdy_grpc::BirdInfo_Point* found_point);
  private:
  const ::birdy_grpc::BirdInfo_Point& _internal_found_point() const;
  ::birdy_grpc::BirdInfo_Point* _internal_mutable_found_point();
  public:
  void unsafe_arena_set_allocated_found_point(
      ::birdy_grpc::BirdInfo_Point* found_point);
  ::birdy_grpc::BirdInfo_Point* unsafe_arena_release_found_point();

  // .birdy_grpc.Timestamp found_time = 2;
  bool has_found_time() const;
  private:
  bool _internal_has_found_time() const;
  public:
  void clear_found_time();
  const ::birdy_grpc::Timestamp& found_time() const;
  ::birdy_grpc::Timestamp* release_found_time();
  ::birdy_grpc::Timestamp* mutable_found_time();
  void set_allocated_found_time(::birdy_grpc::Timestamp* found_time);
  private:
  const ::birdy_grpc::Timestamp& _internal_found_time() const;
  ::birdy_grpc::Timestamp* _internal_mutable_found_time();
  public:
  void unsafe_arena_set_allocated_found_time(
      ::birdy_grpc::Timestamp* found_time);
  ::birdy_grpc::Timestamp* unsafe_arena_release_found_time();

  // @@protoc_insertion_point(class_scope:birdy_grpc.BirdInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr finder_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr photo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sound_;
  ::birdy_grpc::BirdInfo_Point* found_point_;
  ::birdy_grpc::Timestamp* found_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_birdy_2eproto;
};
// -------------------------------------------------------------------

class FindBirdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:birdy_grpc.FindBirdRequest) */ {
 public:
  inline FindBirdRequest() : FindBirdRequest(nullptr) {}
  virtual ~FindBirdRequest();

  FindBirdRequest(const FindBirdRequest& from);
  FindBirdRequest(FindBirdRequest&& from) noexcept
    : FindBirdRequest() {
    *this = ::std::move(from);
  }

  inline FindBirdRequest& operator=(const FindBirdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindBirdRequest& operator=(FindBirdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindBirdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindBirdRequest* internal_default_instance() {
    return reinterpret_cast<const FindBirdRequest*>(
               &_FindBirdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FindBirdRequest& a, FindBirdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindBirdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindBirdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindBirdRequest* New() const final {
    return CreateMaybeMessage<FindBirdRequest>(nullptr);
  }

  FindBirdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindBirdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindBirdRequest& from);
  void MergeFrom(const FindBirdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindBirdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "birdy_grpc.FindBirdRequest";
  }
  protected:
  explicit FindBirdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_birdy_2eproto);
    return ::descriptor_table_birdy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FindBirdRequest_FindType FindType;
  static constexpr FindType BY_PHOTO =
    FindBirdRequest_FindType_BY_PHOTO;
  static constexpr FindType BY_SOUND =
    FindBirdRequest_FindType_BY_SOUND;
  static inline bool FindType_IsValid(int value) {
    return FindBirdRequest_FindType_IsValid(value);
  }
  static constexpr FindType FindType_MIN =
    FindBirdRequest_FindType_FindType_MIN;
  static constexpr FindType FindType_MAX =
    FindBirdRequest_FindType_FindType_MAX;
  static constexpr int FindType_ARRAYSIZE =
    FindBirdRequest_FindType_FindType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FindType_descriptor() {
    return FindBirdRequest_FindType_descriptor();
  }
  template<typename T>
  static inline const std::string& FindType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FindType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FindType_Name.");
    return FindBirdRequest_FindType_Name(enum_t_value);
  }
  static inline bool FindType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FindType* value) {
    return FindBirdRequest_FindType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .birdy_grpc.FindBirdRequest.FindType type = 1;
  void clear_type();
  ::birdy_grpc::FindBirdRequest_FindType type() const;
  void set_type(::birdy_grpc::FindBirdRequest_FindType value);
  private:
  ::birdy_grpc::FindBirdRequest_FindType _internal_type() const;
  void _internal_set_type(::birdy_grpc::FindBirdRequest_FindType value);
  public:

  // @@protoc_insertion_point(class_scope:birdy_grpc.FindBirdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_birdy_2eproto;
};
// -------------------------------------------------------------------

class FindBirdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:birdy_grpc.FindBirdResponse) */ {
 public:
  inline FindBirdResponse() : FindBirdResponse(nullptr) {}
  virtual ~FindBirdResponse();

  FindBirdResponse(const FindBirdResponse& from);
  FindBirdResponse(FindBirdResponse&& from) noexcept
    : FindBirdResponse() {
    *this = ::std::move(from);
  }

  inline FindBirdResponse& operator=(const FindBirdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindBirdResponse& operator=(FindBirdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindBirdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindBirdResponse* internal_default_instance() {
    return reinterpret_cast<const FindBirdResponse*>(
               &_FindBirdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FindBirdResponse& a, FindBirdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindBirdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindBirdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindBirdResponse* New() const final {
    return CreateMaybeMessage<FindBirdResponse>(nullptr);
  }

  FindBirdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindBirdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindBirdResponse& from);
  void MergeFrom(const FindBirdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindBirdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "birdy_grpc.FindBirdResponse";
  }
  protected:
  explicit FindBirdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_birdy_2eproto);
    return ::descriptor_table_birdy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FindBirdResponse_Result Result;
  static constexpr Result FOUND =
    FindBirdResponse_Result_FOUND;
  static constexpr Result NOT_FOUND =
    FindBirdResponse_Result_NOT_FOUND;
  static inline bool Result_IsValid(int value) {
    return FindBirdResponse_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    FindBirdResponse_Result_Result_MIN;
  static constexpr Result Result_MAX =
    FindBirdResponse_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    FindBirdResponse_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return FindBirdResponse_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return FindBirdResponse_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return FindBirdResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kResFieldNumber = 1,
  };
  // .birdy_grpc.BirdInfo info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::birdy_grpc::BirdInfo& info() const;
  ::birdy_grpc::BirdInfo* release_info();
  ::birdy_grpc::BirdInfo* mutable_info();
  void set_allocated_info(::birdy_grpc::BirdInfo* info);
  private:
  const ::birdy_grpc::BirdInfo& _internal_info() const;
  ::birdy_grpc::BirdInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::birdy_grpc::BirdInfo* info);
  ::birdy_grpc::BirdInfo* unsafe_arena_release_info();

  // .birdy_grpc.FindBirdResponse.Result res = 1;
  void clear_res();
  ::birdy_grpc::FindBirdResponse_Result res() const;
  void set_res(::birdy_grpc::FindBirdResponse_Result value);
  private:
  ::birdy_grpc::FindBirdResponse_Result _internal_res() const;
  void _internal_set_res(::birdy_grpc::FindBirdResponse_Result value);
  public:

  // @@protoc_insertion_point(class_scope:birdy_grpc.FindBirdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::birdy_grpc::BirdInfo* info_;
  int res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_birdy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegistrationRequest

// string first_name = 1;
inline void RegistrationRequest::clear_first_name() {
  first_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegistrationRequest::first_name() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.RegistrationRequest.first_name)
  return _internal_first_name();
}
inline void RegistrationRequest::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.RegistrationRequest.first_name)
}
inline std::string* RegistrationRequest::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:birdy_grpc.RegistrationRequest.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& RegistrationRequest::_internal_first_name() const {
  return first_name_.Get();
}
inline void RegistrationRequest::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegistrationRequest::set_first_name(std::string&& value) {
  
  first_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:birdy_grpc.RegistrationRequest.first_name)
}
inline void RegistrationRequest::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:birdy_grpc.RegistrationRequest.first_name)
}
inline void RegistrationRequest::set_first_name(const char* value,
    size_t size) {
  
  first_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:birdy_grpc.RegistrationRequest.first_name)
}
inline std::string* RegistrationRequest::_internal_mutable_first_name() {
  
  return first_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegistrationRequest::release_first_name() {
  // @@protoc_insertion_point(field_release:birdy_grpc.RegistrationRequest.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegistrationRequest::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:birdy_grpc.RegistrationRequest.first_name)
}

// string middle_name = 2;
inline void RegistrationRequest::clear_middle_name() {
  middle_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegistrationRequest::middle_name() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.RegistrationRequest.middle_name)
  return _internal_middle_name();
}
inline void RegistrationRequest::set_middle_name(const std::string& value) {
  _internal_set_middle_name(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.RegistrationRequest.middle_name)
}
inline std::string* RegistrationRequest::mutable_middle_name() {
  // @@protoc_insertion_point(field_mutable:birdy_grpc.RegistrationRequest.middle_name)
  return _internal_mutable_middle_name();
}
inline const std::string& RegistrationRequest::_internal_middle_name() const {
  return middle_name_.Get();
}
inline void RegistrationRequest::_internal_set_middle_name(const std::string& value) {
  
  middle_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegistrationRequest::set_middle_name(std::string&& value) {
  
  middle_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:birdy_grpc.RegistrationRequest.middle_name)
}
inline void RegistrationRequest::set_middle_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  middle_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:birdy_grpc.RegistrationRequest.middle_name)
}
inline void RegistrationRequest::set_middle_name(const char* value,
    size_t size) {
  
  middle_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:birdy_grpc.RegistrationRequest.middle_name)
}
inline std::string* RegistrationRequest::_internal_mutable_middle_name() {
  
  return middle_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegistrationRequest::release_middle_name() {
  // @@protoc_insertion_point(field_release:birdy_grpc.RegistrationRequest.middle_name)
  return middle_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegistrationRequest::set_allocated_middle_name(std::string* middle_name) {
  if (middle_name != nullptr) {
    
  } else {
    
  }
  middle_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), middle_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:birdy_grpc.RegistrationRequest.middle_name)
}

// string last_name = 3;
inline void RegistrationRequest::clear_last_name() {
  last_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegistrationRequest::last_name() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.RegistrationRequest.last_name)
  return _internal_last_name();
}
inline void RegistrationRequest::set_last_name(const std::string& value) {
  _internal_set_last_name(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.RegistrationRequest.last_name)
}
inline std::string* RegistrationRequest::mutable_last_name() {
  // @@protoc_insertion_point(field_mutable:birdy_grpc.RegistrationRequest.last_name)
  return _internal_mutable_last_name();
}
inline const std::string& RegistrationRequest::_internal_last_name() const {
  return last_name_.Get();
}
inline void RegistrationRequest::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegistrationRequest::set_last_name(std::string&& value) {
  
  last_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:birdy_grpc.RegistrationRequest.last_name)
}
inline void RegistrationRequest::set_last_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:birdy_grpc.RegistrationRequest.last_name)
}
inline void RegistrationRequest::set_last_name(const char* value,
    size_t size) {
  
  last_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:birdy_grpc.RegistrationRequest.last_name)
}
inline std::string* RegistrationRequest::_internal_mutable_last_name() {
  
  return last_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegistrationRequest::release_last_name() {
  // @@protoc_insertion_point(field_release:birdy_grpc.RegistrationRequest.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegistrationRequest::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:birdy_grpc.RegistrationRequest.last_name)
}

// string birth_date = 4;
inline void RegistrationRequest::clear_birth_date() {
  birth_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegistrationRequest::birth_date() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.RegistrationRequest.birth_date)
  return _internal_birth_date();
}
inline void RegistrationRequest::set_birth_date(const std::string& value) {
  _internal_set_birth_date(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.RegistrationRequest.birth_date)
}
inline std::string* RegistrationRequest::mutable_birth_date() {
  // @@protoc_insertion_point(field_mutable:birdy_grpc.RegistrationRequest.birth_date)
  return _internal_mutable_birth_date();
}
inline const std::string& RegistrationRequest::_internal_birth_date() const {
  return birth_date_.Get();
}
inline void RegistrationRequest::_internal_set_birth_date(const std::string& value) {
  
  birth_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegistrationRequest::set_birth_date(std::string&& value) {
  
  birth_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:birdy_grpc.RegistrationRequest.birth_date)
}
inline void RegistrationRequest::set_birth_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  birth_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:birdy_grpc.RegistrationRequest.birth_date)
}
inline void RegistrationRequest::set_birth_date(const char* value,
    size_t size) {
  
  birth_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:birdy_grpc.RegistrationRequest.birth_date)
}
inline std::string* RegistrationRequest::_internal_mutable_birth_date() {
  
  return birth_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegistrationRequest::release_birth_date() {
  // @@protoc_insertion_point(field_release:birdy_grpc.RegistrationRequest.birth_date)
  return birth_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegistrationRequest::set_allocated_birth_date(std::string* birth_date) {
  if (birth_date != nullptr) {
    
  } else {
    
  }
  birth_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), birth_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:birdy_grpc.RegistrationRequest.birth_date)
}

// string city = 5;
inline void RegistrationRequest::clear_city() {
  city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegistrationRequest::city() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.RegistrationRequest.city)
  return _internal_city();
}
inline void RegistrationRequest::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.RegistrationRequest.city)
}
inline std::string* RegistrationRequest::mutable_city() {
  // @@protoc_insertion_point(field_mutable:birdy_grpc.RegistrationRequest.city)
  return _internal_mutable_city();
}
inline const std::string& RegistrationRequest::_internal_city() const {
  return city_.Get();
}
inline void RegistrationRequest::_internal_set_city(const std::string& value) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegistrationRequest::set_city(std::string&& value) {
  
  city_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:birdy_grpc.RegistrationRequest.city)
}
inline void RegistrationRequest::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:birdy_grpc.RegistrationRequest.city)
}
inline void RegistrationRequest::set_city(const char* value,
    size_t size) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:birdy_grpc.RegistrationRequest.city)
}
inline std::string* RegistrationRequest::_internal_mutable_city() {
  
  return city_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegistrationRequest::release_city() {
  // @@protoc_insertion_point(field_release:birdy_grpc.RegistrationRequest.city)
  return city_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegistrationRequest::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:birdy_grpc.RegistrationRequest.city)
}

// string email = 6;
inline void RegistrationRequest::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegistrationRequest::email() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.RegistrationRequest.email)
  return _internal_email();
}
inline void RegistrationRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.RegistrationRequest.email)
}
inline std::string* RegistrationRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:birdy_grpc.RegistrationRequest.email)
  return _internal_mutable_email();
}
inline const std::string& RegistrationRequest::_internal_email() const {
  return email_.Get();
}
inline void RegistrationRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegistrationRequest::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:birdy_grpc.RegistrationRequest.email)
}
inline void RegistrationRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:birdy_grpc.RegistrationRequest.email)
}
inline void RegistrationRequest::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:birdy_grpc.RegistrationRequest.email)
}
inline std::string* RegistrationRequest::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegistrationRequest::release_email() {
  // @@protoc_insertion_point(field_release:birdy_grpc.RegistrationRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegistrationRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:birdy_grpc.RegistrationRequest.email)
}

// string password = 7;
inline void RegistrationRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegistrationRequest::password() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.RegistrationRequest.password)
  return _internal_password();
}
inline void RegistrationRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.RegistrationRequest.password)
}
inline std::string* RegistrationRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:birdy_grpc.RegistrationRequest.password)
  return _internal_mutable_password();
}
inline const std::string& RegistrationRequest::_internal_password() const {
  return password_.Get();
}
inline void RegistrationRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegistrationRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:birdy_grpc.RegistrationRequest.password)
}
inline void RegistrationRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:birdy_grpc.RegistrationRequest.password)
}
inline void RegistrationRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:birdy_grpc.RegistrationRequest.password)
}
inline std::string* RegistrationRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegistrationRequest::release_password() {
  // @@protoc_insertion_point(field_release:birdy_grpc.RegistrationRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegistrationRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:birdy_grpc.RegistrationRequest.password)
}

// -------------------------------------------------------------------

// RegistrationResponse

// .birdy_grpc.RegistrationResponse.Result result = 1;
inline void RegistrationResponse::clear_result() {
  result_ = 0;
}
inline ::birdy_grpc::RegistrationResponse_Result RegistrationResponse::_internal_result() const {
  return static_cast< ::birdy_grpc::RegistrationResponse_Result >(result_);
}
inline ::birdy_grpc::RegistrationResponse_Result RegistrationResponse::result() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.RegistrationResponse.result)
  return _internal_result();
}
inline void RegistrationResponse::_internal_set_result(::birdy_grpc::RegistrationResponse_Result value) {
  
  result_ = value;
}
inline void RegistrationResponse::set_result(::birdy_grpc::RegistrationResponse_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.RegistrationResponse.result)
}

// -------------------------------------------------------------------

// LoginRequest

// string email = 1;
inline void LoginRequest::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginRequest::email() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.LoginRequest.email)
  return _internal_email();
}
inline void LoginRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.LoginRequest.email)
}
inline std::string* LoginRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:birdy_grpc.LoginRequest.email)
  return _internal_mutable_email();
}
inline const std::string& LoginRequest::_internal_email() const {
  return email_.Get();
}
inline void LoginRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginRequest::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:birdy_grpc.LoginRequest.email)
}
inline void LoginRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:birdy_grpc.LoginRequest.email)
}
inline void LoginRequest::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:birdy_grpc.LoginRequest.email)
}
inline std::string* LoginRequest::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginRequest::release_email() {
  // @@protoc_insertion_point(field_release:birdy_grpc.LoginRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:birdy_grpc.LoginRequest.email)
}

// string password = 2;
inline void LoginRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.LoginRequest.password)
  return _internal_password();
}
inline void LoginRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.LoginRequest.password)
}
inline std::string* LoginRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:birdy_grpc.LoginRequest.password)
  return _internal_mutable_password();
}
inline const std::string& LoginRequest::_internal_password() const {
  return password_.Get();
}
inline void LoginRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:birdy_grpc.LoginRequest.password)
}
inline void LoginRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:birdy_grpc.LoginRequest.password)
}
inline void LoginRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:birdy_grpc.LoginRequest.password)
}
inline std::string* LoginRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:birdy_grpc.LoginRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:birdy_grpc.LoginRequest.password)
}

// -------------------------------------------------------------------

// LoginResponse

// .birdy_grpc.LoginResponse.Result result = 1;
inline void LoginResponse::clear_result() {
  result_ = 0;
}
inline ::birdy_grpc::LoginResponse_Result LoginResponse::_internal_result() const {
  return static_cast< ::birdy_grpc::LoginResponse_Result >(result_);
}
inline ::birdy_grpc::LoginResponse_Result LoginResponse::result() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.LoginResponse.result)
  return _internal_result();
}
inline void LoginResponse::_internal_set_result(::birdy_grpc::LoginResponse_Result value) {
  
  result_ = value;
}
inline void LoginResponse::set_result(::birdy_grpc::LoginResponse_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.LoginResponse.result)
}

// -------------------------------------------------------------------

// Timestamp

// int64 seconds = 1;
inline void Timestamp::clear_seconds() {
  seconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Timestamp::_internal_seconds() const {
  return seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Timestamp::seconds() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.Timestamp.seconds)
  return _internal_seconds();
}
inline void Timestamp::_internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seconds_ = value;
}
inline void Timestamp::set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.Timestamp.seconds)
}

// int32 nanos = 2;
inline void Timestamp::clear_nanos() {
  nanos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Timestamp::_internal_nanos() const {
  return nanos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Timestamp::nanos() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.Timestamp.nanos)
  return _internal_nanos();
}
inline void Timestamp::_internal_set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nanos_ = value;
}
inline void Timestamp::set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nanos(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.Timestamp.nanos)
}

// -------------------------------------------------------------------

// BirdInfo_Point

// double latitude = 1;
inline void BirdInfo_Point::clear_latitude() {
  latitude_ = 0;
}
inline double BirdInfo_Point::_internal_latitude() const {
  return latitude_;
}
inline double BirdInfo_Point::latitude() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.BirdInfo.Point.latitude)
  return _internal_latitude();
}
inline void BirdInfo_Point::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void BirdInfo_Point::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.BirdInfo.Point.latitude)
}

// double longitude = 2;
inline void BirdInfo_Point::clear_longitude() {
  longitude_ = 0;
}
inline double BirdInfo_Point::_internal_longitude() const {
  return longitude_;
}
inline double BirdInfo_Point::longitude() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.BirdInfo.Point.longitude)
  return _internal_longitude();
}
inline void BirdInfo_Point::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void BirdInfo_Point::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.BirdInfo.Point.longitude)
}

// -------------------------------------------------------------------

// BirdInfo

// .birdy_grpc.BirdInfo.Point found_point = 1;
inline bool BirdInfo::_internal_has_found_point() const {
  return this != internal_default_instance() && found_point_ != nullptr;
}
inline bool BirdInfo::has_found_point() const {
  return _internal_has_found_point();
}
inline void BirdInfo::clear_found_point() {
  if (GetArena() == nullptr && found_point_ != nullptr) {
    delete found_point_;
  }
  found_point_ = nullptr;
}
inline const ::birdy_grpc::BirdInfo_Point& BirdInfo::_internal_found_point() const {
  const ::birdy_grpc::BirdInfo_Point* p = found_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::birdy_grpc::BirdInfo_Point*>(
      &::birdy_grpc::_BirdInfo_Point_default_instance_);
}
inline const ::birdy_grpc::BirdInfo_Point& BirdInfo::found_point() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.BirdInfo.found_point)
  return _internal_found_point();
}
inline void BirdInfo::unsafe_arena_set_allocated_found_point(
    ::birdy_grpc::BirdInfo_Point* found_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(found_point_);
  }
  found_point_ = found_point;
  if (found_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:birdy_grpc.BirdInfo.found_point)
}
inline ::birdy_grpc::BirdInfo_Point* BirdInfo::release_found_point() {
  
  ::birdy_grpc::BirdInfo_Point* temp = found_point_;
  found_point_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::birdy_grpc::BirdInfo_Point* BirdInfo::unsafe_arena_release_found_point() {
  // @@protoc_insertion_point(field_release:birdy_grpc.BirdInfo.found_point)
  
  ::birdy_grpc::BirdInfo_Point* temp = found_point_;
  found_point_ = nullptr;
  return temp;
}
inline ::birdy_grpc::BirdInfo_Point* BirdInfo::_internal_mutable_found_point() {
  
  if (found_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::birdy_grpc::BirdInfo_Point>(GetArena());
    found_point_ = p;
  }
  return found_point_;
}
inline ::birdy_grpc::BirdInfo_Point* BirdInfo::mutable_found_point() {
  // @@protoc_insertion_point(field_mutable:birdy_grpc.BirdInfo.found_point)
  return _internal_mutable_found_point();
}
inline void BirdInfo::set_allocated_found_point(::birdy_grpc::BirdInfo_Point* found_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete found_point_;
  }
  if (found_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(found_point);
    if (message_arena != submessage_arena) {
      found_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, found_point, submessage_arena);
    }
    
  } else {
    
  }
  found_point_ = found_point;
  // @@protoc_insertion_point(field_set_allocated:birdy_grpc.BirdInfo.found_point)
}

// .birdy_grpc.Timestamp found_time = 2;
inline bool BirdInfo::_internal_has_found_time() const {
  return this != internal_default_instance() && found_time_ != nullptr;
}
inline bool BirdInfo::has_found_time() const {
  return _internal_has_found_time();
}
inline void BirdInfo::clear_found_time() {
  if (GetArena() == nullptr && found_time_ != nullptr) {
    delete found_time_;
  }
  found_time_ = nullptr;
}
inline const ::birdy_grpc::Timestamp& BirdInfo::_internal_found_time() const {
  const ::birdy_grpc::Timestamp* p = found_time_;
  return p != nullptr ? *p : *reinterpret_cast<const ::birdy_grpc::Timestamp*>(
      &::birdy_grpc::_Timestamp_default_instance_);
}
inline const ::birdy_grpc::Timestamp& BirdInfo::found_time() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.BirdInfo.found_time)
  return _internal_found_time();
}
inline void BirdInfo::unsafe_arena_set_allocated_found_time(
    ::birdy_grpc::Timestamp* found_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(found_time_);
  }
  found_time_ = found_time;
  if (found_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:birdy_grpc.BirdInfo.found_time)
}
inline ::birdy_grpc::Timestamp* BirdInfo::release_found_time() {
  
  ::birdy_grpc::Timestamp* temp = found_time_;
  found_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::birdy_grpc::Timestamp* BirdInfo::unsafe_arena_release_found_time() {
  // @@protoc_insertion_point(field_release:birdy_grpc.BirdInfo.found_time)
  
  ::birdy_grpc::Timestamp* temp = found_time_;
  found_time_ = nullptr;
  return temp;
}
inline ::birdy_grpc::Timestamp* BirdInfo::_internal_mutable_found_time() {
  
  if (found_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::birdy_grpc::Timestamp>(GetArena());
    found_time_ = p;
  }
  return found_time_;
}
inline ::birdy_grpc::Timestamp* BirdInfo::mutable_found_time() {
  // @@protoc_insertion_point(field_mutable:birdy_grpc.BirdInfo.found_time)
  return _internal_mutable_found_time();
}
inline void BirdInfo::set_allocated_found_time(::birdy_grpc::Timestamp* found_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete found_time_;
  }
  if (found_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(found_time);
    if (message_arena != submessage_arena) {
      found_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, found_time, submessage_arena);
    }
    
  } else {
    
  }
  found_time_ = found_time;
  // @@protoc_insertion_point(field_set_allocated:birdy_grpc.BirdInfo.found_time)
}

// string finder_email = 3;
inline void BirdInfo::clear_finder_email() {
  finder_email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BirdInfo::finder_email() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.BirdInfo.finder_email)
  return _internal_finder_email();
}
inline void BirdInfo::set_finder_email(const std::string& value) {
  _internal_set_finder_email(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.BirdInfo.finder_email)
}
inline std::string* BirdInfo::mutable_finder_email() {
  // @@protoc_insertion_point(field_mutable:birdy_grpc.BirdInfo.finder_email)
  return _internal_mutable_finder_email();
}
inline const std::string& BirdInfo::_internal_finder_email() const {
  return finder_email_.Get();
}
inline void BirdInfo::_internal_set_finder_email(const std::string& value) {
  
  finder_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BirdInfo::set_finder_email(std::string&& value) {
  
  finder_email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:birdy_grpc.BirdInfo.finder_email)
}
inline void BirdInfo::set_finder_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  finder_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:birdy_grpc.BirdInfo.finder_email)
}
inline void BirdInfo::set_finder_email(const char* value,
    size_t size) {
  
  finder_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:birdy_grpc.BirdInfo.finder_email)
}
inline std::string* BirdInfo::_internal_mutable_finder_email() {
  
  return finder_email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BirdInfo::release_finder_email() {
  // @@protoc_insertion_point(field_release:birdy_grpc.BirdInfo.finder_email)
  return finder_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BirdInfo::set_allocated_finder_email(std::string* finder_email) {
  if (finder_email != nullptr) {
    
  } else {
    
  }
  finder_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), finder_email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:birdy_grpc.BirdInfo.finder_email)
}

// bytes photo = 4;
inline void BirdInfo::clear_photo() {
  photo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BirdInfo::photo() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.BirdInfo.photo)
  return _internal_photo();
}
inline void BirdInfo::set_photo(const std::string& value) {
  _internal_set_photo(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.BirdInfo.photo)
}
inline std::string* BirdInfo::mutable_photo() {
  // @@protoc_insertion_point(field_mutable:birdy_grpc.BirdInfo.photo)
  return _internal_mutable_photo();
}
inline const std::string& BirdInfo::_internal_photo() const {
  return photo_.Get();
}
inline void BirdInfo::_internal_set_photo(const std::string& value) {
  
  photo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BirdInfo::set_photo(std::string&& value) {
  
  photo_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:birdy_grpc.BirdInfo.photo)
}
inline void BirdInfo::set_photo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  photo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:birdy_grpc.BirdInfo.photo)
}
inline void BirdInfo::set_photo(const void* value,
    size_t size) {
  
  photo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:birdy_grpc.BirdInfo.photo)
}
inline std::string* BirdInfo::_internal_mutable_photo() {
  
  return photo_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BirdInfo::release_photo() {
  // @@protoc_insertion_point(field_release:birdy_grpc.BirdInfo.photo)
  return photo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BirdInfo::set_allocated_photo(std::string* photo) {
  if (photo != nullptr) {
    
  } else {
    
  }
  photo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), photo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:birdy_grpc.BirdInfo.photo)
}

// bytes sound = 5;
inline void BirdInfo::clear_sound() {
  sound_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BirdInfo::sound() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.BirdInfo.sound)
  return _internal_sound();
}
inline void BirdInfo::set_sound(const std::string& value) {
  _internal_set_sound(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.BirdInfo.sound)
}
inline std::string* BirdInfo::mutable_sound() {
  // @@protoc_insertion_point(field_mutable:birdy_grpc.BirdInfo.sound)
  return _internal_mutable_sound();
}
inline const std::string& BirdInfo::_internal_sound() const {
  return sound_.Get();
}
inline void BirdInfo::_internal_set_sound(const std::string& value) {
  
  sound_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BirdInfo::set_sound(std::string&& value) {
  
  sound_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:birdy_grpc.BirdInfo.sound)
}
inline void BirdInfo::set_sound(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sound_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:birdy_grpc.BirdInfo.sound)
}
inline void BirdInfo::set_sound(const void* value,
    size_t size) {
  
  sound_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:birdy_grpc.BirdInfo.sound)
}
inline std::string* BirdInfo::_internal_mutable_sound() {
  
  return sound_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BirdInfo::release_sound() {
  // @@protoc_insertion_point(field_release:birdy_grpc.BirdInfo.sound)
  return sound_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BirdInfo::set_allocated_sound(std::string* sound) {
  if (sound != nullptr) {
    
  } else {
    
  }
  sound_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sound,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:birdy_grpc.BirdInfo.sound)
}

// -------------------------------------------------------------------

// FindBirdRequest

// .birdy_grpc.FindBirdRequest.FindType type = 1;
inline void FindBirdRequest::clear_type() {
  type_ = 0;
}
inline ::birdy_grpc::FindBirdRequest_FindType FindBirdRequest::_internal_type() const {
  return static_cast< ::birdy_grpc::FindBirdRequest_FindType >(type_);
}
inline ::birdy_grpc::FindBirdRequest_FindType FindBirdRequest::type() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.FindBirdRequest.type)
  return _internal_type();
}
inline void FindBirdRequest::_internal_set_type(::birdy_grpc::FindBirdRequest_FindType value) {
  
  type_ = value;
}
inline void FindBirdRequest::set_type(::birdy_grpc::FindBirdRequest_FindType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.FindBirdRequest.type)
}

// bytes data = 2;
inline void FindBirdRequest::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FindBirdRequest::data() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.FindBirdRequest.data)
  return _internal_data();
}
inline void FindBirdRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.FindBirdRequest.data)
}
inline std::string* FindBirdRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:birdy_grpc.FindBirdRequest.data)
  return _internal_mutable_data();
}
inline const std::string& FindBirdRequest::_internal_data() const {
  return data_.Get();
}
inline void FindBirdRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindBirdRequest::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:birdy_grpc.FindBirdRequest.data)
}
inline void FindBirdRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:birdy_grpc.FindBirdRequest.data)
}
inline void FindBirdRequest::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:birdy_grpc.FindBirdRequest.data)
}
inline std::string* FindBirdRequest::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindBirdRequest::release_data() {
  // @@protoc_insertion_point(field_release:birdy_grpc.FindBirdRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindBirdRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:birdy_grpc.FindBirdRequest.data)
}

// -------------------------------------------------------------------

// FindBirdResponse

// .birdy_grpc.FindBirdResponse.Result res = 1;
inline void FindBirdResponse::clear_res() {
  res_ = 0;
}
inline ::birdy_grpc::FindBirdResponse_Result FindBirdResponse::_internal_res() const {
  return static_cast< ::birdy_grpc::FindBirdResponse_Result >(res_);
}
inline ::birdy_grpc::FindBirdResponse_Result FindBirdResponse::res() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.FindBirdResponse.res)
  return _internal_res();
}
inline void FindBirdResponse::_internal_set_res(::birdy_grpc::FindBirdResponse_Result value) {
  
  res_ = value;
}
inline void FindBirdResponse::set_res(::birdy_grpc::FindBirdResponse_Result value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:birdy_grpc.FindBirdResponse.res)
}

// .birdy_grpc.BirdInfo info = 2;
inline bool FindBirdResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool FindBirdResponse::has_info() const {
  return _internal_has_info();
}
inline void FindBirdResponse::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::birdy_grpc::BirdInfo& FindBirdResponse::_internal_info() const {
  const ::birdy_grpc::BirdInfo* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::birdy_grpc::BirdInfo*>(
      &::birdy_grpc::_BirdInfo_default_instance_);
}
inline const ::birdy_grpc::BirdInfo& FindBirdResponse::info() const {
  // @@protoc_insertion_point(field_get:birdy_grpc.FindBirdResponse.info)
  return _internal_info();
}
inline void FindBirdResponse::unsafe_arena_set_allocated_info(
    ::birdy_grpc::BirdInfo* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:birdy_grpc.FindBirdResponse.info)
}
inline ::birdy_grpc::BirdInfo* FindBirdResponse::release_info() {
  
  ::birdy_grpc::BirdInfo* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::birdy_grpc::BirdInfo* FindBirdResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:birdy_grpc.FindBirdResponse.info)
  
  ::birdy_grpc::BirdInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::birdy_grpc::BirdInfo* FindBirdResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::birdy_grpc::BirdInfo>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::birdy_grpc::BirdInfo* FindBirdResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:birdy_grpc.FindBirdResponse.info)
  return _internal_mutable_info();
}
inline void FindBirdResponse::set_allocated_info(::birdy_grpc::BirdInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:birdy_grpc.FindBirdResponse.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace birdy_grpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::birdy_grpc::RegistrationResponse_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::birdy_grpc::RegistrationResponse_Result>() {
  return ::birdy_grpc::RegistrationResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::birdy_grpc::LoginResponse_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::birdy_grpc::LoginResponse_Result>() {
  return ::birdy_grpc::LoginResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::birdy_grpc::FindBirdRequest_FindType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::birdy_grpc::FindBirdRequest_FindType>() {
  return ::birdy_grpc::FindBirdRequest_FindType_descriptor();
}
template <> struct is_proto_enum< ::birdy_grpc::FindBirdResponse_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::birdy_grpc::FindBirdResponse_Result>() {
  return ::birdy_grpc::FindBirdResponse_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_birdy_2eproto
