// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: birdy.proto

#include "birdy.pb.h"
#include "birdy.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace birdy_grpc {

static const char* MainEndpoint_method_names[] = {
  "/birdy_grpc.MainEndpoint/RegisterUser",
  "/birdy_grpc.MainEndpoint/LoginUser",
  "/birdy_grpc.MainEndpoint/FindBirdByName",
  "/birdy_grpc.MainEndpoint/AddBirdWithData",
  "/birdy_grpc.MainEndpoint/SendMessage",
  "/birdy_grpc.MainEndpoint/SubscribeToNewMessages",
};

std::unique_ptr< MainEndpoint::Stub> MainEndpoint::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MainEndpoint::Stub> stub(new MainEndpoint::Stub(channel));
  return stub;
}

MainEndpoint::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RegisterUser_(MainEndpoint_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoginUser_(MainEndpoint_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FindBirdByName_(MainEndpoint_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_AddBirdWithData_(MainEndpoint_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendMessage_(MainEndpoint_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeToNewMessages_(MainEndpoint_method_names[5], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status MainEndpoint::Stub::RegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::birdy_grpc::RegistrationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterUser_, context, request, response);
}

void MainEndpoint::Stub::experimental_async::RegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest* request, ::birdy_grpc::RegistrationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterUser_, context, request, response, std::move(f));
}

void MainEndpoint::Stub::experimental_async::RegisterUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::RegistrationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterUser_, context, request, response, std::move(f));
}

void MainEndpoint::Stub::experimental_async::RegisterUser(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest* request, ::birdy_grpc::RegistrationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterUser_, context, request, response, reactor);
}

void MainEndpoint::Stub::experimental_async::RegisterUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::RegistrationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::birdy_grpc::RegistrationResponse>* MainEndpoint::Stub::AsyncRegisterUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::birdy_grpc::RegistrationResponse>::Create(channel_.get(), cq, rpcmethod_RegisterUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::birdy_grpc::RegistrationResponse>* MainEndpoint::Stub::PrepareAsyncRegisterUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::birdy_grpc::RegistrationResponse>::Create(channel_.get(), cq, rpcmethod_RegisterUser_, context, request, false);
}

::grpc::Status MainEndpoint::Stub::LoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::birdy_grpc::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LoginUser_, context, request, response);
}

void MainEndpoint::Stub::experimental_async::LoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest* request, ::birdy_grpc::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoginUser_, context, request, response, std::move(f));
}

void MainEndpoint::Stub::experimental_async::LoginUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoginUser_, context, request, response, std::move(f));
}

void MainEndpoint::Stub::experimental_async::LoginUser(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest* request, ::birdy_grpc::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoginUser_, context, request, response, reactor);
}

void MainEndpoint::Stub::experimental_async::LoginUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoginUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::birdy_grpc::LoginResponse>* MainEndpoint::Stub::AsyncLoginUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::birdy_grpc::LoginResponse>::Create(channel_.get(), cq, rpcmethod_LoginUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::birdy_grpc::LoginResponse>* MainEndpoint::Stub::PrepareAsyncLoginUserRaw(::grpc::ClientContext* context, const ::birdy_grpc::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::birdy_grpc::LoginResponse>::Create(channel_.get(), cq, rpcmethod_LoginUser_, context, request, false);
}

::grpc::ClientReader< ::birdy_grpc::FindBirdByNameResponse>* MainEndpoint::Stub::FindBirdByNameRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdByNameRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::birdy_grpc::FindBirdByNameResponse>::Create(channel_.get(), rpcmethod_FindBirdByName_, context, request);
}

void MainEndpoint::Stub::experimental_async::FindBirdByName(::grpc::ClientContext* context, ::birdy_grpc::FindBirdByNameRequest* request, ::grpc::experimental::ClientReadReactor< ::birdy_grpc::FindBirdByNameResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::birdy_grpc::FindBirdByNameResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_FindBirdByName_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::birdy_grpc::FindBirdByNameResponse>* MainEndpoint::Stub::AsyncFindBirdByNameRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdByNameRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::birdy_grpc::FindBirdByNameResponse>::Create(channel_.get(), cq, rpcmethod_FindBirdByName_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::birdy_grpc::FindBirdByNameResponse>* MainEndpoint::Stub::PrepareAsyncFindBirdByNameRaw(::grpc::ClientContext* context, const ::birdy_grpc::FindBirdByNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::birdy_grpc::FindBirdByNameResponse>::Create(channel_.get(), cq, rpcmethod_FindBirdByName_, context, request, false, nullptr);
}

::grpc::Status MainEndpoint::Stub::AddBirdWithData(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest& request, ::birdy_grpc::AddBirdWithDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddBirdWithData_, context, request, response);
}

void MainEndpoint::Stub::experimental_async::AddBirdWithData(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest* request, ::birdy_grpc::AddBirdWithDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddBirdWithData_, context, request, response, std::move(f));
}

void MainEndpoint::Stub::experimental_async::AddBirdWithData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::AddBirdWithDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddBirdWithData_, context, request, response, std::move(f));
}

void MainEndpoint::Stub::experimental_async::AddBirdWithData(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest* request, ::birdy_grpc::AddBirdWithDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddBirdWithData_, context, request, response, reactor);
}

void MainEndpoint::Stub::experimental_async::AddBirdWithData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::AddBirdWithDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddBirdWithData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::birdy_grpc::AddBirdWithDataResponse>* MainEndpoint::Stub::AsyncAddBirdWithDataRaw(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::birdy_grpc::AddBirdWithDataResponse>::Create(channel_.get(), cq, rpcmethod_AddBirdWithData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::birdy_grpc::AddBirdWithDataResponse>* MainEndpoint::Stub::PrepareAsyncAddBirdWithDataRaw(::grpc::ClientContext* context, const ::birdy_grpc::AddBirdWithDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::birdy_grpc::AddBirdWithDataResponse>::Create(channel_.get(), cq, rpcmethod_AddBirdWithData_, context, request, false);
}

::grpc::Status MainEndpoint::Stub::SendMessage(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest& request, ::birdy_grpc::SendMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendMessage_, context, request, response);
}

void MainEndpoint::Stub::experimental_async::SendMessage(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest* request, ::birdy_grpc::SendMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, std::move(f));
}

void MainEndpoint::Stub::experimental_async::SendMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::SendMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, std::move(f));
}

void MainEndpoint::Stub::experimental_async::SendMessage(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest* request, ::birdy_grpc::SendMessageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, reactor);
}

void MainEndpoint::Stub::experimental_async::SendMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::birdy_grpc::SendMessageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::birdy_grpc::SendMessageResponse>* MainEndpoint::Stub::AsyncSendMessageRaw(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::birdy_grpc::SendMessageResponse>::Create(channel_.get(), cq, rpcmethod_SendMessage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::birdy_grpc::SendMessageResponse>* MainEndpoint::Stub::PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::birdy_grpc::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::birdy_grpc::SendMessageResponse>::Create(channel_.get(), cq, rpcmethod_SendMessage_, context, request, false);
}

::grpc::ClientReader< ::birdy_grpc::ChatMessage>* MainEndpoint::Stub::SubscribeToNewMessagesRaw(::grpc::ClientContext* context, const ::birdy_grpc::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::birdy_grpc::ChatMessage>::Create(channel_.get(), rpcmethod_SubscribeToNewMessages_, context, request);
}

void MainEndpoint::Stub::experimental_async::SubscribeToNewMessages(::grpc::ClientContext* context, ::birdy_grpc::Empty* request, ::grpc::experimental::ClientReadReactor< ::birdy_grpc::ChatMessage>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::birdy_grpc::ChatMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeToNewMessages_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::birdy_grpc::ChatMessage>* MainEndpoint::Stub::AsyncSubscribeToNewMessagesRaw(::grpc::ClientContext* context, const ::birdy_grpc::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::birdy_grpc::ChatMessage>::Create(channel_.get(), cq, rpcmethod_SubscribeToNewMessages_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::birdy_grpc::ChatMessage>* MainEndpoint::Stub::PrepareAsyncSubscribeToNewMessagesRaw(::grpc::ClientContext* context, const ::birdy_grpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::birdy_grpc::ChatMessage>::Create(channel_.get(), cq, rpcmethod_SubscribeToNewMessages_, context, request, false, nullptr);
}

MainEndpoint::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainEndpoint_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainEndpoint::Service, ::birdy_grpc::RegistrationRequest, ::birdy_grpc::RegistrationResponse>(
          [](MainEndpoint::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::birdy_grpc::RegistrationRequest* req,
             ::birdy_grpc::RegistrationResponse* resp) {
               return service->RegisterUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainEndpoint_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainEndpoint::Service, ::birdy_grpc::LoginRequest, ::birdy_grpc::LoginResponse>(
          [](MainEndpoint::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::birdy_grpc::LoginRequest* req,
             ::birdy_grpc::LoginResponse* resp) {
               return service->LoginUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainEndpoint_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MainEndpoint::Service, ::birdy_grpc::FindBirdByNameRequest, ::birdy_grpc::FindBirdByNameResponse>(
          [](MainEndpoint::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::birdy_grpc::FindBirdByNameRequest* req,
             ::grpc_impl::ServerWriter<::birdy_grpc::FindBirdByNameResponse>* writer) {
               return service->FindBirdByName(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainEndpoint_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainEndpoint::Service, ::birdy_grpc::AddBirdWithDataRequest, ::birdy_grpc::AddBirdWithDataResponse>(
          [](MainEndpoint::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::birdy_grpc::AddBirdWithDataRequest* req,
             ::birdy_grpc::AddBirdWithDataResponse* resp) {
               return service->AddBirdWithData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainEndpoint_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainEndpoint::Service, ::birdy_grpc::SendMessageRequest, ::birdy_grpc::SendMessageResponse>(
          [](MainEndpoint::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::birdy_grpc::SendMessageRequest* req,
             ::birdy_grpc::SendMessageResponse* resp) {
               return service->SendMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainEndpoint_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MainEndpoint::Service, ::birdy_grpc::Empty, ::birdy_grpc::ChatMessage>(
          [](MainEndpoint::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::birdy_grpc::Empty* req,
             ::grpc_impl::ServerWriter<::birdy_grpc::ChatMessage>* writer) {
               return service->SubscribeToNewMessages(ctx, req, writer);
             }, this)));
}

MainEndpoint::Service::~Service() {
}

::grpc::Status MainEndpoint::Service::RegisterUser(::grpc::ServerContext* context, const ::birdy_grpc::RegistrationRequest* request, ::birdy_grpc::RegistrationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainEndpoint::Service::LoginUser(::grpc::ServerContext* context, const ::birdy_grpc::LoginRequest* request, ::birdy_grpc::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainEndpoint::Service::FindBirdByName(::grpc::ServerContext* context, const ::birdy_grpc::FindBirdByNameRequest* request, ::grpc::ServerWriter< ::birdy_grpc::FindBirdByNameResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainEndpoint::Service::AddBirdWithData(::grpc::ServerContext* context, const ::birdy_grpc::AddBirdWithDataRequest* request, ::birdy_grpc::AddBirdWithDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainEndpoint::Service::SendMessage(::grpc::ServerContext* context, const ::birdy_grpc::SendMessageRequest* request, ::birdy_grpc::SendMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainEndpoint::Service::SubscribeToNewMessages(::grpc::ServerContext* context, const ::birdy_grpc::Empty* request, ::grpc::ServerWriter< ::birdy_grpc::ChatMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace birdy_grpc

